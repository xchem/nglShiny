
HTMLWidgets.widget({

  name: 'nglShiny',
  type: 'output',

  factory: function(el, width, height) {
    console.log("manufacturing nglShiny widget");
    return {
       renderValue: function(options) {
          console.log("---- options");
          console.log(options)
          var stage;
          stage = new NGL.Stage(el);

          stage.signals.clicked.removeAll();
          stage.signals.clicked.add(function (pickingProxy) {
            const clicked = window.clicked;
            const clickNames = window.clickNames;
            // This can be easily reorgnised... Lots of repitive code!!
            if (pickingProxy.altKey===true && (pickingProxy.atom || pickingProxy.bond )){
              const atom = pickingProxy.atom || pickingProxy.closestBondAtom;
              if (pickingProxy.ctrlKey===true){
                const residue = atom.residue
                residue.eachAtom(function(x){
                  if (pickingProxy.shiftKey === false){
                    // If shift was not pressed, ignore backbone atom
                    if (x.isBackbone() === true) return 0;
                  }
                  fullname = x.qualifiedName()
                  name = x.index

                  if (clicked.includes(name)){
                    for(var i = 0; i < clicked.length; i++){
                      if(clicked[i] === name) {clicked.split(i,1);}
                    }
                  } else {
                    clicked.push(name)
                  }
                  if (clickNames.includes(fullname)){
                    for(var i = 0; i < clicked.length; i++){
                      if(clicked[i] === name) {clicked.split(i,1);}
                    }
                  } else {
                    clickNames.push(fullname)
                  }

                })
              } else {
                const fullname = atom.qualifiedName();
                const name = atom.index;
                if (clicked.includes(name)) {
                  for(var i = 0; i < clicked.length; i++){
                    if (clicked[i] === name){clicked.splice(i,1); }
                  }
                } else {
                  clicked.push(name);
                }
                if (clickNames.includes(fullname)) {
                  for(var i = 0; i < clickNames.length; i++){
                    if (clickNames[i] === fullname) {clickNames.splice(i,1)}
                  }
                } else {
                  clickNames.push(fullname);
                }
              }

              var seleName = []
              for (var i = 0; i < clicked.length; i++){
                seleName[i] = clicked[i]
              }
              // Current issue is that we have no way of regenerating either mol or protein representation
              if (window.clickedRepresentation !== undefined){
                window.clickedRepresentation.dispose() //pickingProxy.component.removeRepresentation(window.clickedRepresentation);
                window.clickedRepresentation = undefined
              }
              window.clickedRepresentation = pickingProxy.component.addRepresentation("ball+stick", { sele: '@'.concat(seleName.toString()) , aspectRatio: 6, opacity: 0.5});
              // Output to back-end
              Shiny.onInputChange('clickedAtoms', clicked);
              Shiny.onInputChange('clickNames', clickNames);
            }
            window.clicked = clicked;
            window.clickNames = clickNames;
          });
          window.stage = stage;
          uri = options.pdbID;
          window.pdbID = options.pdbID;
          stage.loadFile(uri, {defaultRepresentation: false}).then(function(o){
          o.autoView(500)
              }) // then
          },
       resize: function(width, height) {
          console.log("entering resize");
          correctedHeight = window.innerHeight * 0.7;
          $("#nglShiny").height(correctedHeight);
          console.log("nglShiny.resize: " + width + ", " + correctedHeight + ": " + height);
          //stage.handleResize()
          }
    } // return
  } // factory
});  // widget


// Create NGL Stage object

// Add to resources!! Settings -> JS
// https://github.com/m2ms/fragalysis-frontend/issues/627
// https://cdnjs.cloudflare.com/ajax/libs/three.js/84/three.min.js
// https://github.com/nglviewer/ngl/blob/4ab8753c38995da675e9efcae2291a298948ccca/src/structure/structure.ts#L773

refmesh=[0.1,
         -0.11, 0.02, 0.07, -0.14, 0.0, 0.1, -0.11, -0.02, -0.05, -0.14, -0.04, -0.1, -0.11, -0.04, -0.07, -0.11, -0.08, 0.0, -0.11, 0.11, -0.02, -0.14, 0.08, 0.02, -0.14, 0.06, 0.05, -0.11, -0.09, 0.07, -0.14, -0.05, 0.02, -0.14, -0.06, 0.1, 0.0, 0.13, 0.09, 0.0, 0.13, 0.05, 0.0, 0.15, 0.13, 0.0, 0.09, 0.13, 0.04, 0.06, 0.1, 0.04, 0.11, 0.16, 0.0, -0.05, 0.16, 0.0, -0.05, 0.16, 0.0, 0.0, -0.05, 0.0, 0.15, -0.02, 0.04, 0.15, -0.07, 0.04, 0.13, -0.16, 0.0, 0.0, -0.15, 0.04, 0.02, -0.15, 0.04, -0.02, -0.02, 0.04, -0.15, 0.0, 0.0, -0.17, -0.05, 0.0, -0.15, -0.09, 0.0, 0.13, -0.1, 0.0, 0.13, -0.13, 0.0, 0.09, -0.1, -0.04, -0.11, -0.13, -0.04, -0.06, -0.13, 0.0, -0.09, 0.07, -0.04, -0.13, 0.02, -0.04, -0.15, 0.05, 0.0, -0.15, 0.13, 0.04, -0.06, 0.16, 0.0, -0.05, 0.13, 0.0, -0.09, 0.07, 0.11, 0.08, 0.1, 0.11, 0.04, 0.05, 0.14, 0.04, -0.05, 0.11, 0.09, 0.0, 0.11, 0.11, -0.02, 0.14, 0.06, -0.1, 0.11, -0.02, -0.1, 0.11, 0.02, -0.07, 0.14, 0.0, 0.0, 0.11, -0.11, -0.05, 0.11, -0.09, -0.02, 0.14, -0.06, 0.1, 0.11, -0.04, 0.07, 0.11, -0.08, 0.05, 0.14, -0.04, 0.11, 0.08, 0.08, 0.13, 0.04, 0.06, 0.11, 0.08, 0.08, 0.02, -0.04, 0.15, 0.0, 0.0, 0.17, 0.02, -0.04, 0.15, 0.13, 0.0, -0.09, 0.16, 0.0, -0.05, 0.13, 0.0, -0.09, 0.05, 0.0, -0.15, 0.0, 0.0, -0.17, 0.05, 0.0, -0.15, 0.04, -0.08, 0.13, 0.02, -0.04, 0.15, 0.04, -0.08, 0.13, 0.1, 0.0, -0.13, 0.13, 0.0, -0.09, 0.1, 0.0, -0.13, 0.0, -0.11, 0.11, 0.04, -0.08, 0.13, 0.0, -0.11, 0.11, 0.07, -0.04, -0.13, 0.1, 0.0, -0.13, 0.07, -0.04, -0.13, 0.09, 0.0, -0.13, 0.05, 0.0, -0.15, 0.09, 0.0, -0.13, 0.1, 0.04, -0.11, 0.09, 0.0, -0.13, 0.1, 0.04, -0.11, 0.04, -0.08, -0.13, 0.07, -0.04, -0.13, 0.04, -0.08, -0.13, -0.04, 0.08, -0.13, -0.07, 0.04, -0.13, -0.04, 0.08, -0.13, -0.02, -0.14, 0.08, 0.0, -0.11, 0.11, -0.02, -0.14, 0.08, 0.05, -0.11, -0.09, 0.04, -0.08, -0.13, 0.05, -0.11, -0.09, -0.05, 0.11, -0.09, -0.04, 0.08, -0.13, -0.05, 0.11, -0.09, -0.07, -0.11, 0.08, -0.02, -0.14, 0.08, -0.07, -0.11, 0.08, 0.07, -0.14, 0.05, 0.1, -0.11, 0.02, 0.07, -0.14, 0.05, 0.07, -0.14, -0.05, 0.05, -0.11, -0.09, 0.07, -0.14, -0.05, -0.07, 0.14, -0.05, -0.05, 0.11, -0.09, -0.07, 0.14, -0.05, 0.05, -0.11, 0.09, 0.07, -0.14, 0.05, 0.05, -0.11, 0.09, 0.1, -0.11, -0.02, 0.07, -0.14, -0.05, 0.1, -0.11, -0.02, -0.1, 0.11, -0.02, -0.07, 0.14, -0.05, -0.1, 0.11, -0.02, 0.04, -0.08, 0.13, 0.05, -0.11, 0.09, 0.04, -0.08, 0.13, -0.14, 0.08, 0.0, -0.1, 0.11, -0.02, -0.14, 0.08, 0.0, 0.07, -0.04, 0.13, 0.04, -0.08, 0.13, 0.07, -0.04, 0.13, -0.07, 0.14, 0.05, -0.02, 0.14, 0.06, -0.07, 0.14, 0.05, 0.14, -0.08, 0.0, 0.1, -0.11, -0.02, 0.14, -0.08, 0.0, -0.15, 0.04, -0.02, -0.14, 0.08, 0.0, -0.15, 0.04, -0.02, -0.07, 0.14, 0.0, -0.07, 0.14, 0.05, -0.07, 0.14, 0.0, 0.15, -0.04, -0.02, 0.14, -0.08, 0.0, 0.15, -0.04, -0.02, 0.1, 0.0, 0.13, 0.07, -0.04, 0.13, 0.1, 0.0, 0.13, 0.04, -0.08, -0.13, 0.0, -0.11, -0.11, 0.04, -0.08, -0.13, -0.16, 0.0, -0.05, -0.15, 0.04, -0.02, -0.16, 0.0, -0.05, 0.13, 0.0, 0.09, 0.1, 0.0, 0.13, 0.13, 0.0, 0.09, -0.07, 0.14, -0.05, -0.07, 0.14, 0.0, -0.07, 0.14, -0.05, 0.02, -0.04, -0.15, 0.04, -0.08, -0.13, 0.02, -0.04, -0.15, -0.13, 0.0, -0.09, -0.16, 0.0, -0.05, -0.13, 0.0, -0.09, -0.02, 0.14, -0.06, -0.07, 0.14, -0.05, -0.02, 0.14, -0.06, 0.16, 0.0, 0.05, 0.13, 0.0, 0.09, 0.16, 0.0, 0.05, 0.0, 0.0, -0.17, 0.02, -0.04, -0.15, 0.0, 0.0, -0.17, 0.15, -0.04, 0.02, 0.16, 0.0, 0.05, 0.15, -0.04, 0.02, 0.02, 0.14, -0.08, -0.02, 0.14, -0.06, 0.02, 0.14, -0.08, -0.05, 0.0, -0.15, 0.0, 0.0, -0.17, -0.05, 0.0, -0.15, -0.1, 0.0, -0.13, -0.13, 0.0, -0.09, -0.1, 0.0, -0.13, 0.05, 0.14, -0.04, 0.02, 0.14, -0.08, 0.05, 0.14, -0.04, -0.07, 0.04, -0.13, -0.1, 0.0, -0.13, -0.07, 0.04, -0.13, -0.09, 0.0, -0.13, -0.05, 0.0, -0.15, -0.09, 0.0, -0.13, -0.14, 0.08, 0.0, -0.15, 0.04, 0.02, -0.14, 0.08, 0.0, 0.14, -0.08, 0.0, 0.15, -0.04, 0.02, 0.14, -0.08, 0.0, 0.08, 0.14, 0.0, 0.05, 0.14, -0.04, 0.08, 0.14, 0.0, -0.1, -0.04, -0.11, -0.09, 0.0, -0.13, -0.1, -0.04, -0.11, -0.1, 0.11, 0.02, -0.14, 0.08, 0.0, -0.1, 0.11, 0.02, 0.1, -0.11, 0.02, 0.14, -0.08, 0.0, 0.1, -0.11, 0.02, 0.05, 0.14, 0.04, 0.08, 0.14, 0.0, 0.05, 0.14, 0.04, -0.02, -0.14, 0.08, -0.05, -0.14, 0.04, -0.02, -0.14, 0.08, -0.11, -0.08, -0.08, -0.1, -0.04, -0.11, -0.11, -0.08, -0.08, -0.07, 0.14, 0.05, -0.1, 0.11, 0.02, -0.07, 0.14, 0.05, 0.02, -0.14, 0.06, -0.02, -0.14, 0.08, 0.02, -0.14, 0.06, -0.07, -0.11, -0.08, -0.11, -0.08, -0.08, -0.07, -0.11, -0.08, -0.05, 0.11, 0.09, -0.07, 0.14, 0.05, -0.05, 0.11, 0.09, 0.02, 0.14, 0.08, 0.05, 0.14, 0.04, 0.02, 0.14, 0.08, -0.11, -0.08, 0.08, -0.11, -0.08, 0.08, -0.1, -0.11, 0.04, -0.02, -0.14, -0.08, -0.07, -0.11, -0.08, -0.02, -0.14, -0.08, 0.14, -0.08, 0.0, 0.15, -0.04, 0.02, 0.14, -0.08, 0.0, -0.07, 0.04, 0.13, -0.04, 0.08, 0.13, -0.07, 0.04, 0.13, 0.1, 0.11, 0.04, 0.11, 0.08, 0.08, 0.1, 0.11, 0.04, 0.0, -0.11, -0.11, -0.02, -0.14, -0.08, 0.0, -0.11, -0.11, -0.11, -0.08, -0.08, -0.1, -0.11, -0.04, -0.11, -0.08, -0.08, 0.15, -0.04, 0.02, 0.16, 0.0, 0.05, 0.15, -0.04, 0.02, -0.1, 0.0, 0.13, -0.07, 0.04, 0.13, -0.1, 0.0, 0.13, 0.09, 0.14, 0.0, 0.1, 0.11, 0.04, 0.09, 0.14, 0.0, -0.13, -0.04, -0.06, -0.11, -0.08, -0.08, -0.13, -0.04, -0.06, 0.07, -0.14, 0.05, 0.02, -0.14, 0.06, 0.07, -0.14, 0.05, -0.13, 0.0, 0.09, -0.1, 0.0, 0.13, -0.13, 0.0, 0.09, 0.1, 0.11, -0.04, 0.09, 0.14, 0.0, 0.1, 0.11, -0.04, 0.13, 0.0, 0.09, 0.1, 0.0, 0.13, 0.13, 0.0, 0.09, -0.16, 0.0, -0.05, -0.13, -0.04, -0.06, -0.16, 0.0, -0.05, -0.02, -0.14, 0.08, -0.05, -0.14, 0.04, -0.02, -0.14, 0.08, 0.11, 0.08, -0.08, 0.1, 0.11, -0.04, 0.11, 0.08, -0.08, -0.16, 0.0, 0.0, -0.16, 0.0, -0.05, -0.16, 0.0, 0.0, -0.16, 0.0, 0.05, -0.13, 0.0, 0.09, -0.16, 0.0, 0.05, 0.13, 0.04, -0.06, 0.11, 0.08, -0.08, 0.13, 0.04, -0.06, 0.07, -0.04, 0.13, 0.04, -0.08, 0.13, 0.07, -0.04, 0.13, -0.15, 0.04, 0.02, -0.16, 0.0, 0.05, -0.15, 0.04, 0.02, -0.16, 0.0, 0.05, -0.16, 0.0, 0.0, -0.16, 0.0, 0.05, 0.16, 0.0, 0.05, 0.13, 0.0, 0.09, 0.16, 0.0, 0.05, -0.04, 0.08, 0.13, -0.02, 0.04, 0.15, -0.04, 0.08, 0.13, 0.16, 0.0, -0.05, 0.13, 0.04, -0.06, 0.16, 0.0, -0.05, -0.13, -0.04, 0.06, -0.16, 0.0, 0.05, -0.13, -0.04, 0.06, 0.04, -0.08, 0.13, 0.05, -0.11, 0.09, 0.04, -0.08, 0.13, 0.0, 0.11, 0.11, -0.04, 0.08, 0.13, 0.0, 0.11, 0.11, 0.16, 0.0, 0.0, 0.16, 0.0, -0.05, 0.16, 0.0, 0.0, -0.11, -0.08, 0.08, -0.13, -0.04, 0.06, -0.11, -0.08, 0.08, 0.1, 0.0, 0.13, 0.07, -0.04, 0.13, 0.1, 0.0, 0.13, 0.02, 0.14, 0.08, 0.0, 0.11, 0.11, 0.02, 0.14, 0.08, -0.1, -0.11, 0.04, -0.11, -0.08, 0.08, -0.1, -0.11, 0.04, 0.07, 0.11, 0.08, 0.02, 0.14, 0.08, 0.07, 0.11, 0.08, 0.16, 0.0, 0.05, 0.16, 0.0, 0.0, 0.16, 0.0, 0.05, 0.05, -0.11, 0.09, 0.07, -0.14, 0.05, 0.05, -0.11, 0.09, 0.13, 0.04, 0.06, 0.16, 0.0, 0.05, 0.13, 0.04, 0.06, 0.07, -0.14, 0.05, 0.1, -0.11, 0.02, 0.07, -0.14, 0.05, 0.11, 0.08, 0.08, 0.07, 0.11, 0.08, 0.11, 0.08, 0.08, 0.11, 0.08, -0.08, 0.1, 0.04, -0.11, 0.11, 0.08, -0.08, -0.09, -0.14, 0.0, -0.1, -0.11, 0.04, -0.09, -0.14, 0.0, 0.1, 0.04, 0.11, 0.11, 0.08, 0.08, 0.1, 0.04, 0.11, 0.07, 0.11, -0.08, 0.11, 0.08, -0.08, 0.07, 0.11, -0.08, -0.1, -0.11, -0.04, -0.09, -0.14, 0.0, -0.1, -0.11, -0.04, -0.11, -0.08, 0.08, -0.07, -0.11, 0.08, -0.11, -0.08, 0.08, 0.09, 0.0, 0.13, 0.1, 0.04, 0.11, 0.09, 0.0, 0.13, 0.02, 0.14, -0.08, 0.07, 0.11, -0.08, 0.02, 0.14, -0.08, -0.1, -0.04, 0.11, -0.11, -0.08, 0.08, -0.1, -0.04, 0.11, 0.05, 0.0, 0.15, 0.09, 0.0, 0.13, 0.05, 0.0, 0.15, 0.0, 0.11, -0.11, 0.02, 0.14, -0.08, 0.0, 0.11, -0.11, -0.09, 0.0, 0.13, -0.1, -0.04, 0.11, -0.09, 0.0, 0.13, -0.04, 0.08, -0.13, 0.0, 0.11, -0.11, -0.04, 0.08, -0.13, -0.05, 0.0, 0.15, -0.09, 0.0, 0.13, -0.05, 0.0, 0.15, 0.0, 0.0, 0.17, 0.05, 0.0, 0.15, 0.0, 0.0, 0.17, -0.02, 0.04, -0.15, -0.04, 0.08, -0.13, -0.02, 0.04, -0.15, -0.02, 0.04, 0.15, 0.0, 0.0, 0.17, -0.02, 0.04, 0.15, 0.0, 0.0, 0.17, -0.05, 0.0, 0.15, 0.0, 0.0, 0.17, 0.16, 0.0, -0.05, 0.15, -0.04, -0.02, 0.16, 0.0, -0.05, 0.0, 0.0, -0.17, -0.02, 0.04, -0.15, 0.0, 0.0, -0.17, 0.16, 0.0, -0.05, 0.15, -0.04, -0.02, 0.16, 0.0, -0.05, 0.0, 0.0, 0.17, -0.05, 0.0, 0.15, 0.0, 0.0, 0.17, -0.02, 0.04, 0.15, 0.0, 0.0, 0.17, -0.02, 0.04, 0.15, -0.02, 0.04, -0.15, -0.04, 0.08, -0.13, -0.02, 0.04, -0.15, 0.0, 0.0, 0.17, 0.05, 0.0, 0.15, 0.0, 0.0, 0.17, -0.05, 0.0, 0.15, -0.09, 0.0, 0.13, -0.05, 0.0, 0.15, -0.04, 0.08, -0.13, 0.0, 0.11, -0.11, -0.04, 0.08, -0.13, -0.09, 0.0, 0.13, -0.1, -0.04, 0.11, -0.09, 0.0, 0.13, 0.0, 0.11, -0.11, 0.02, 0.14, -0.08, 0.0, 0.11, -0.11, 0.05, 0.0, 0.15, 0.09, 0.0, 0.13, 0.05, 0.0, 0.15, -0.1, -0.04, 0.11, -0.11, -0.08, 0.08, -0.1, -0.04, 0.11, 0.02, 0.14, -0.08, 0.07, 0.11, -0.08, 0.02, 0.14, -0.08, 0.09, 0.0, 0.13, 0.1, 0.04, 0.11, 0.09, 0.0, 0.13, -0.11, -0.08, 0.08, -0.07, -0.11, 0.08, -0.11, -0.08, 0.08, -0.1, -0.11, -0.04, -0.09, -0.14, 0.0, -0.1, -0.11, -0.04, 0.07, 0.11, -0.08, 0.11, 0.08, -0.08, 0.07, 0.11, -0.08, 0.1, 0.04, 0.11, 0.11, 0.08, 0.08, 0.1, 0.04, 0.11, -0.09, -0.14, 0.0, -0.1, -0.11, 0.04, -0.09, -0.14, 0.0, 0.11, 0.08, -0.08, 0.1, 0.04, -0.11, 0.11, 0.08, -0.08, 0.11, 0.08, 0.08, 0.07, 0.11, 0.08, 0.11, 0.08, 0.08, 0.13, 0.04, 0.06, 0.16, 0.0, 0.05, 0.13, 0.04, 0.06, 0.16, 0.0, 0.05, 0.16, 0.0, 0.0, 0.16, 0.0, 0.05, 0.07, 0.11, 0.08, 0.02, 0.14, 0.08, 0.07, 0.11, 0.08, -0.1, -0.11, 0.04, -0.11, -0.08, 0.08, -0.1, -0.11, 0.04, 0.02, 0.14, 0.08, 0.0, 0.11, 0.11, 0.02, 0.14, 0.08, -0.11, -0.08, 0.08, -0.13, -0.04, 0.06, -0.11, -0.08, 0.08, 0.16, 0.0, 0.0, 0.16, 0.0, -0.05, 0.16, 0.0, 0.0, -0.05, -0.14, 0.04, -0.08, -0.14, 0.0, -0.05, -0.14, 0.04, 0.0, 0.11, 0.11, -0.04, 0.08, 0.13, 0.0, 0.11, 0.11, -0.13, -0.04, 0.06, -0.16, 0.0, 0.05, -0.13, -0.04, 0.06, 0.16, 0.0, -0.05, 0.13, 0.04, -0.06, 0.16, 0.0, -0.05, -0.08, -0.14, 0.0, -0.05, -0.14, -0.04, -0.08, -0.14, 0.0, -0.04, 0.08, 0.13, -0.02, 0.04, 0.15, -0.04, 0.08, 0.13, -0.16, 0.0, 0.05, -0.16, 0.0, 0.0, -0.16, 0.0, 0.05, -0.15, 0.04, 0.02, -0.16, 0.0, 0.05, -0.15, 0.04, 0.02, 0.13, 0.04, -0.06, 0.11, 0.08, -0.08, 0.13, 0.04, -0.06, -0.16, 0.0, 0.05, -0.13, 0.0, 0.09, -0.16, 0.0, 0.05, -0.16, 0.0, 0.0, -0.16, 0.0, -0.05, -0.16, 0.0, 0.0, 0.11, 0.08, -0.08, 0.1, 0.11, -0.04, 0.11, 0.08, -0.08, -0.05, -0.14, -0.04, -0.02, -0.14, -0.08, -0.05, -0.14, -0.04, -0.16, 0.0, -0.05, -0.13, -0.04, -0.06, -0.16, 0.0, -0.05, -0.02, -0.14, -0.08, 0.02, -0.14, -0.06, -0.02, -0.14, -0.08, 0.1, 0.11, -0.04, 0.09, 0.14, 0.0, 0.1, 0.11, -0.04, -0.13, 0.0, 0.09, -0.1, 0.0, 0.13, -0.13, 0.0, 0.09, -0.13, -0.04, -0.06, -0.11, -0.08, -0.08, -0.13, -0.04, -0.06, 0.09, 0.14, 0.0, 0.1, 0.11, 0.04, 0.09, 0.14, 0.0, 0.02, -0.14, -0.06, 0.07, -0.14, -0.05, 0.02, -0.14, -0.06, -0.1, 0.0, 0.13, -0.07, 0.04, 0.13, -0.1, 0.0, 0.13, -0.11, -0.08, -0.08, -0.1, -0.11, -0.04, -0.11, -0.08, -0.08, 0.07, -0.14, -0.05, 0.07, -0.14, 0.0, 0.07, -0.14, -0.05, 0.0, -0.11, -0.11, -0.02, -0.14, -0.08, 0.0, -0.11, -0.11, 0.1, 0.11, 0.04, 0.11, 0.08, 0.08, 0.1, 0.11, 0.04, -0.07, 0.04, 0.13, -0.04, 0.08, 0.13, -0.07, 0.04, 0.13, -0.02, -0.14, -0.08, -0.07, -0.11, -0.08, -0.02, -0.14, -0.08, 0.11, 0.08, 0.08, 0.13, 0.04, 0.06, 0.11, 0.08, 0.08, 0.07, -0.14, 0.0, 0.07, -0.14, 0.05, 0.07, -0.14, 0.0, -0.04, 0.08, 0.13, -0.05, 0.11, 0.09, -0.04, 0.08, 0.13, -0.02, 0.14, 0.06, 0.02, 0.14, 0.08, -0.02, 0.14, 0.06, 0.07, -0.14, 0.05, 0.02, -0.14, 0.06, 0.07, -0.14, 0.05, 0.02, -0.14, -0.06, 0.01, -0.38, -0.01, 0.0, -0.38, -0.01, -0.02, 0.14, 0.06, -0.01, 0.38, 0.01, -0.07, 0.14, 0.05, 0.1, -0.11, -0.02, 0.28, -0.17, -0.18, 0.14, -0.08, 0.0, -0.15, 0.04, -0.02, -0.28, 0.17, -0.18, -0.29, 0.16, -0.19, -0.07, 0.14, 0.0, -0.01, 0.38, 0.01, -0.01, 0.38, 0.0, 0.15, -0.04, -0.02, 0.28, -0.17, -0.18, 0.29, -0.16, -0.19, -0.05, -0.14, -0.04, 0.0, -0.38, -0.01, -0.01, -0.38, 0.0, 0.0, -0.11, -0.11, -0.08, -0.17, -0.33, 0.04, -0.08, -0.13, -0.15, 0.04, -0.02, -0.29, 0.15, -0.19, -0.16, 0.0, -0.05, -0.07, 0.14, 0.0, -0.01, 0.38, -0.01, -0.07, 0.14, -0.05, 0.02, -0.04, -0.15, -0.08, -0.17, -0.33, -0.09, -0.16, -0.33, -0.13, 0.0, -0.09, -0.29, 0.15, -0.19, -0.28, 0.15, -0.2, 0.07, -0.14, 0.0, 0.01, -0.38, -0.01, 0.07, -0.14, -0.05, -0.02, 0.14, -0.06, -0.01, 0.38, -0.01, 0.0, 0.38, -0.01, 0.02, -0.04, -0.15, -0.09, -0.15, -0.33, 0.0, 0.0, -0.17, -0.02, 0.14, -0.06, 0.0, 0.38, -0.01, 0.02, 0.14, -0.08, -0.05, 0.0, -0.15, -0.09, -0.15, -0.33, -0.1, -0.15, -0.33, -0.13, 0.0, -0.09, -0.27, 0.15, -0.21, -0.1, 0.0, -0.13, 0.07, -0.14, 0.0, 0.01, -0.38, 0.01, 0.01, -0.38, 0.0, 0.05, 0.14, -0.04, 0.0, 0.38, -0.01, 0.01, 0.38, 0.0, -0.07, 0.04, -0.13, -0.27, 0.15, -0.21, -0.27, 0.16, -0.21, 0.1, -0.11, 0.02, 0.28, -0.17, 0.18, 0.28, -0.18, 0.19, -0.05, 0.0, -0.15, -0.11, -0.15, -0.33, -0.09, 0.0, -0.13, -0.15, 0.04, 0.02, -0.28, 0.17, 0.18, -0.14, 0.08, 0.0, 0.02, -0.14, 0.06, 0.0, -0.38, 0.01, 0.0, -0.38, 0.01, 0.05, 0.14, -0.04, 0.01, 0.38, 0.0, 0.08, 0.14, 0.0, -0.1, -0.04, -0.11, -0.11, -0.15, -0.33, -0.12, -0.16, -0.32, -0.1, 0.11, 0.02, -0.28, 0.17, 0.18, -0.28, 0.18, 0.19, 0.05, 0.14, 0.04, 0.01, 0.38, 0.0, 0.01, 0.38, 0.0, 0.15, -0.04, 0.02, 0.28, -0.17, 0.18, 0.14, -0.08, 0.0, -0.1, -0.04, -0.11, -0.12, -0.17, -0.32, -0.11, -0.08, -0.08, -0.1, 0.11, 0.02, -0.27, 0.18, 0.19, -0.07, 0.14, 0.05, -0.07, -0.11, -0.08, -0.12, -0.17, -0.32, -0.11, -0.18, -0.32, -0.05, 0.11, 0.09, -0.27, 0.18, 0.19, -0.27, 0.18, 0.2, 0.15, -0.04, 0.02, 0.29, -0.15, 0.19, 0.29, -0.16, 0.19, 0.05, 0.14, 0.04, 0.0, 0.38, 0.01, 0.02, 0.14, 0.08, 0.02, -0.14, 0.06, 0.01, -0.38, 0.01, 0.07, -0.14, 0.05, -0.02, 0.14, 0.06, 0.0, 0.38, 0.01, 0.0, 0.38, 0.01, -0.05, 0.11, 0.09, -0.26, 0.17, 0.21, -0.04, 0.08, 0.13, 0.13, 0.0, 0.09, 0.27, -0.15, 0.21, 0.28, -0.15, 0.2, 0.13, 0.04, 0.06, 0.34, 0.17, 0.01, 0.11, 0.08, 0.08, -0.07, -0.11, -0.08, -0.1, -0.18, -0.32, -0.02, -0.14, -0.08, -0.07, 0.04, 0.13, -0.26, 0.17, 0.21, -0.27, 0.16, 0.21, -0.05, -0.14, 0.04, 0.0, -0.38, 0.01, -0.02, -0.14, 0.08, 0.1, 0.11, 0.04, 0.34, 0.17, 0.01, 0.34, 0.18, 0.0, 0.0, -0.11, -0.11, -0.1, -0.18, -0.32, -0.09, -0.18, -0.32, -0.1, -0.11, -0.04, -0.34, -0.17, -0.01, -0.11, -0.08, -0.08, -0.07, 0.04, 0.13, -0.27, 0.15, 0.21, -0.1, 0.0, 0.13, 0.07, -0.04, 0.13, 0.26, -0.17, 0.21, 0.27, -0.16, 0.21, 0.1, 0.11, 0.04, 0.33, 0.18, 0.0, 0.09, 0.14, 0.0, -0.13, -0.04, -0.06, -0.34, -0.17, -0.01, -0.34, -0.16, -0.01, -0.13, 0.0, 0.09, -0.27, 0.15, 0.21, -0.28, 0.15, 0.2, 0.13, 0.0, 0.09, 0.29, -0.15, 0.19, 0.16, 0.0, 0.05, 0.1, 0.11, -0.04, 0.33, 0.18, 0.0, 0.34, 0.18, 0.0, 0.05, -0.11, 0.09, 0.26, -0.17, 0.21, 0.04, -0.08, 0.13, -0.13, -0.04, -0.06, -0.35, -0.15, -0.01, -0.16, 0.0, -0.05, 0.1, 0.11, -0.04, 0.34, 0.17, -0.01, 0.11, 0.08, -0.08, -0.16, 0.0, 0.0, -0.35, -0.15, -0.01, -0.35, -0.15, 0.0, -0.13, 0.0, 0.09, -0.29, 0.15, 0.19, -0.16, 0.0, 0.05, 0.07, -0.04, 0.13, 0.27, -0.15, 0.21, 0.1, 0.0, 0.13, -0.04, 0.08, 0.13, -0.05, 0.11, 0.09, -0.04, 0.08, 0.13, -0.02, 0.14, 0.06, 0.02, 0.14, 0.08, -0.02, 0.14, 0.06, 0.02, -0.14, 0.06, -0.02, -0.14, 0.08, 0.02, -0.14, 0.06, 0.02, 0.14, 0.08, 0.05, 0.14, 0.04, 0.02, 0.14, 0.08, -0.05, 0.11, 0.09, -0.07, 0.14, 0.05, -0.05, 0.11, 0.09, 0.1, -0.11, 0.02, 0.14, -0.08, 0.0, 0.1, -0.11, 0.02, -0.07, -0.11, -0.08, -0.11, -0.08, -0.08, -0.07, -0.11, -0.08, -0.07, 0.14, 0.05, -0.1, 0.11, 0.02, -0.07, 0.14, 0.05, 0.07, -0.14, 0.0, 0.07, -0.14, 0.05, 0.07, -0.14, 0.0, -0.11, -0.08, -0.08, -0.1, -0.04, -0.11, -0.11, -0.08, -0.08, 0.05, 0.14, 0.04, 0.08, 0.14, 0.0, 0.05, 0.14, 0.04, -0.1, 0.11, 0.02, -0.14, 0.08, 0.0, -0.1, 0.11, 0.02, -0.1, -0.04, -0.11, -0.09, 0.0, -0.13, -0.1, -0.04, -0.11, 0.08, 0.14, 0.0, 0.05, 0.14, -0.04, 0.08, 0.14, 0.0, -0.14, 0.08, 0.0, -0.15, 0.04, 0.02, -0.14, 0.08, 0.0, 0.07, -0.14, -0.05, 0.07, -0.14, 0.0, 0.07, -0.14, -0.05, -0.09, 0.0, -0.13, -0.05, 0.0, -0.15, -0.09, 0.0, -0.13, -0.07, 0.04, -0.13, -0.1, 0.0, -0.13, -0.07, 0.04, -0.13, 0.05, 0.14, -0.04, 0.02, 0.14, -0.08, 0.05, 0.14, -0.04, -0.1, 0.0, -0.13, -0.13, 0.0, -0.09, -0.1, 0.0, -0.13, -0.05, 0.0, -0.15, 0.0, 0.0, -0.17, -0.05, 0.0, -0.15, -0.05, -0.14, -0.04, -0.02, -0.14, -0.08, -0.05, -0.14, -0.04, 0.02, 0.14, -0.08, -0.02, 0.14, -0.06, 0.02, 0.14, -0.08, 0.0, 0.0, -0.17, 0.02, -0.04, -0.15, 0.0, 0.0, -0.17, 0.02, -0.14, -0.06, 0.07, -0.14, -0.05, 0.02, -0.14, -0.06, -0.02, 0.14, -0.06, -0.07, 0.14, -0.05, -0.02, 0.14, -0.06, -0.13, 0.0, -0.09, -0.16, 0.0, -0.05, -0.13, 0.0, -0.09, 0.02, -0.04, -0.15, 0.04, -0.08, -0.13, 0.02, -0.04, -0.15, -0.05, -0.14, 0.04, -0.08, -0.14, 0.0, -0.05, -0.14, 0.04, -0.07, 0.14, -0.05, -0.07, 0.14, 0.0, -0.07, 0.14, -0.05, -0.16, 0.0, -0.05, -0.15, 0.04, -0.02, -0.16, 0.0, -0.05, 0.04, -0.08, -0.13, 0.0, -0.11, -0.11, 0.04, -0.08, -0.13, -0.02, -0.14, -0.08, 0.02, -0.14, -0.06, -0.02, -0.14, -0.08, 0.15, -0.04, -0.02, 0.14, -0.08, 0.0, 0.15, -0.04, -0.02, -0.07, 0.14, 0.0, -0.07, 0.14, 0.05, -0.07, 0.14, 0.0, -0.15, 0.04, -0.02, -0.14, 0.08, 0.0, -0.15, 0.04, -0.02, -0.08, -0.14, 0.0, -0.05, -0.14, -0.04, -0.08, -0.14, 0.0, 0.14, -0.08, 0.0, 0.1, -0.11, -0.02, 0.14, -0.08, 0.0, -0.07, 0.14, 0.05, -0.02, 0.14, 0.06, -0.07, 0.14, 0.05, -0.14, 0.08, 0.0, -0.1, 0.11, -0.02, -0.14, 0.08, 0.0, -0.1, 0.11, -0.02, -0.07, 0.14, -0.05, -0.1, 0.11, -0.02, 0.1, -0.11, -0.02, 0.07, -0.14, -0.05, 0.1, -0.11, -0.02, -0.07, 0.14, -0.05, -0.05, 0.11, -0.09, -0.07, 0.14, -0.05, 0.07, -0.14, -0.05, 0.05, -0.11, -0.09, 0.07, -0.14, -0.05, -0.07, -0.11, 0.08, -0.02, -0.14, 0.08, -0.07, -0.11, 0.08, -0.05, 0.11, -0.09, -0.04, 0.08, -0.13, -0.05, 0.11, -0.09, 0.05, -0.11, -0.09, 0.04, -0.08, -0.13, 0.05, -0.11, -0.09, -0.02, -0.14, 0.08, 0.0, -0.11, 0.11, -0.02, -0.14, 0.08, -0.04, 0.08, -0.13, -0.07, 0.04, -0.13, -0.04, 0.08, -0.13, 0.04, -0.08, -0.13, 0.07, -0.04, -0.13, 0.04, -0.08, -0.13, 0.1, 0.04, -0.11, 0.09, 0.0, -0.13, 0.1, 0.04, -0.11, 0.09, 0.0, -0.13, 0.05, 0.0, -0.15, 0.09, 0.0, -0.13, 0.07, -0.04, -0.13, 0.1, 0.0, -0.13, 0.07, -0.04, -0.13, 0.0, -0.11, 0.11, 0.04, -0.08, 0.13, 0.0, -0.11, 0.11, 0.1, 0.0, -0.13, 0.13, 0.0, -0.09, 0.1, 0.0, -0.13, 0.04, -0.08, 0.13, 0.02, -0.04, 0.15, 0.04, -0.08, 0.13, 0.05, 0.0, -0.15, 0.0, 0.0, -0.17, 0.05, 0.0, -0.15, 0.13, 0.0, -0.09, 0.16, 0.0, -0.05, 0.13, 0.0, -0.09, 0.02, -0.04, 0.15, 0.0, 0.0, 0.17, 0.02, -0.04, 0.15, 0.0, 0.0, -0.17, -0.02, 0.04, -0.15, 0.0, 0.0, -0.17, -0.01, -0.38, 0.0, -0.01, -0.38, 0.0, -0.01, -0.38, 0.0, 0.0, -0.38, -0.01, -0.01, -0.38, 0.0, 0.0, -0.38, -0.01, 0.01, -0.38, 0.0, 0.0, -0.38, -0.01, 0.01, -0.38, -0.01, 0.0, -0.38, 0.01, 0.01, -0.38, 0.0, 0.01, -0.38, 0.01, -0.01, -0.38, 0.0, 0.0, -0.38, 0.01, 0.0, -0.38, 0.01, 0.29, -0.16, 0.19, 0.28, -0.18, 0.19, 0.28, -0.17, 0.18, 0.28, -0.15, 0.2, 0.29, -0.16, 0.19, 0.29, -0.15, 0.19, 0.27, -0.16, 0.21, 0.28, -0.15, 0.2, 0.27, -0.15, 0.21, 0.27, -0.18, 0.2, 0.27, -0.16, 0.21, 0.26, -0.17, 0.21, 0.28, -0.18, 0.19, 0.27, -0.18, 0.2, 0.27, -0.18, 0.19, -0.09, -0.18, 0.32, -0.11, -0.18, 0.32, -0.1, -0.18, 0.32, -0.09, -0.16, 0.33, -0.09, -0.18, 0.32, -0.08, -0.17, 0.33, -0.1, -0.15, 0.33, -0.09, -0.16, 0.33, -0.09, -0.15, 0.33, -0.12, -0.16, 0.32, -0.1, -0.15, 0.33, -0.11, -0.15, 0.33, -0.11, -0.18, 0.32, -0.12, -0.16, 0.32, -0.12, -0.17, 0.32, -0.34, -0.18, 0.0, -0.34, -0.18, 0.0, -0.33, -0.18, 0.0, -0.34, -0.16, 0.01, -0.34, -0.18, 0.0, -0.34, -0.17, 0.01, -0.35, -0.15, 0.0, -0.34, -0.16, 0.01, -0.35, -0.15, 0.01, -0.34, -0.16, -0.01, -0.35, -0.15, 0.0, -0.35, -0.15, -0.01, -0.34, -0.18, 0.0, -0.34, -0.16, -0.01, -0.34, -0.17, -0.01, -0.11, -0.18, -0.32, -0.09, -0.18, -0.32, -0.1, -0.18, -0.32, -0.12, -0.16, -0.32, -0.11, -0.18, -0.32, -0.12, -0.17, -0.32, -0.1, -0.15, -0.33, -0.12, -0.16, -0.32, -0.11, -0.15, -0.33, -0.09, -0.16, -0.33, -0.1, -0.15, -0.33, -0.09, -0.15, -0.33, -0.09, -0.18, -0.32, -0.09, -0.16, -0.33, -0.08, -0.17, -0.33, 0.28, -0.18, -0.19, 0.29, -0.16, -0.19, 0.28, -0.17, -0.18, 0.27, -0.18, -0.2, 0.28, -0.18, -0.19, 0.27, -0.18, -0.19, 0.27, -0.16, -0.21, 0.27, -0.18, -0.2, 0.26, -0.17, -0.21, 0.28, -0.15, -0.2, 0.27, -0.16, -0.21, 0.27, -0.15, -0.21, 0.29, -0.16, -0.19, 0.28, -0.15, -0.2, 0.29, -0.15, -0.19, 0.1, 0.15, 0.33, 0.09, 0.16, 0.33, 0.09, 0.15, 0.33, 0.12, 0.16, 0.32, 0.1, 0.15, 0.33, 0.11, 0.15, 0.33, 0.11, 0.18, 0.32, 0.12, 0.16, 0.32, 0.12, 0.17, 0.32, 0.09, 0.18, 0.32, 0.11, 0.18, 0.32, 0.1, 0.18, 0.32, 0.09, 0.16, 0.33, 0.09, 0.18, 0.32, 0.08, 0.17, 0.33, -0.28, 0.15, 0.2, -0.29, 0.16, 0.19, -0.29, 0.15, 0.19, -0.27, 0.16, 0.21, -0.28, 0.15, 0.2, -0.27, 0.15, 0.21, -0.27, 0.18, 0.2, -0.27, 0.16, 0.21, -0.26, 0.17, 0.21, -0.28, 0.18, 0.19, -0.27, 0.18, 0.2, -0.27, 0.18, 0.19, -0.29, 0.16, 0.19, -0.28, 0.18, 0.19, -0.28, 0.17, 0.18, -0.28, 0.15, -0.2, -0.27, 0.16, -0.21, -0.27, 0.15, -0.21, -0.29, 0.16, -0.19, -0.28, 0.15, -0.2, -0.29, 0.15, -0.19, -0.28, 0.18, -0.19, -0.29, 0.16, -0.19, -0.28, 0.17, -0.18, -0.27, 0.18, -0.2, -0.28, 0.18, -0.19, -0.27, 0.18, -0.19, -0.27, 0.16, -0.21, -0.27, 0.18, -0.2, -0.26, 0.17, -0.21, 0.1, 0.15, -0.33, 0.12, 0.16, -0.32, 0.11, 0.15, -0.33, 0.09, 0.16, -0.33, 0.1, 0.15, -0.33, 0.09, 0.15, -0.33, 0.09, 0.18, -0.32, 0.09, 0.16, -0.33, 0.08, 0.17, -0.33, 0.11, 0.18, -0.32, 0.09, 0.18, -0.32, 0.1, 0.18, -0.32, 0.12, 0.16, -0.32, 0.11, 0.18, -0.32, 0.12, 0.17, -0.32, 0.35, 0.15, 0.0, 0.34, 0.16, 0.01, 0.35, 0.15, 0.01, 0.34, 0.16, -0.01, 0.35, 0.15, 0.0, 0.35, 0.15, -0.01, 0.34, 0.18, 0.0, 0.34, 0.16, -0.01, 0.34, 0.17, -0.01, 0.34, 0.18, 0.0, 0.34, 0.18, 0.0, 0.33, 0.18, 0.0, 0.34, 0.16, 0.01, 0.34, 0.18, 0.0, 0.34, 0.17, 0.01, 0.01, 0.38, 0.0, 0.0, 0.38, 0.01, 0.0, 0.38, 0.01, 0.01, 0.38, 0.0, 0.01, 0.38, 0.0, 0.01, 0.38, 0.0, 0.0, 0.38, -0.01, 0.01, 0.38, 0.0, 0.0, 0.38, -0.01, -0.01, 0.38, 0.0, 0.0, 0.38, -0.01, -0.01, 0.38, -0.01, 0.0, 0.38, 0.01, -0.01, 0.38, 0.0, -0.01, 0.38, 0.01, -0.1, 0.11, -0.02, -0.28, 0.17, -0.18, -0.14, 0.08, 0.0, -0.05, -0.14, 0.04, -0.01, -0.38, 0.0, -0.01, -0.38, 0.0, 0.02, -0.14, -0.06, 0.0, -0.38, -0.01, -0.02, -0.14, -0.08, -0.1, 0.11, -0.02, -0.27, 0.18, -0.19, -0.28, 0.18, -0.19, 0.1, -0.11, -0.02, 0.27, -0.18, -0.19, 0.28, -0.18, -0.19, -0.05, 0.11, -0.09, -0.27, 0.18, -0.19, -0.07, 0.14, -0.05, 0.05, -0.11, -0.09, 0.27, -0.18, -0.19, 0.07, -0.14, -0.05, -0.05, -0.14, -0.04, -0.01, -0.38, 0.0, -0.08, -0.14, 0.0, -0.07, -0.11, 0.08, -0.1, -0.18, 0.32, -0.11, -0.18, 0.32, -0.05, 0.11, -0.09, -0.26, 0.17, -0.21, -0.27, 0.18, -0.2, 0.05, -0.11, -0.09, 0.26, -0.17, -0.21, 0.27, -0.18, -0.2, 0.0, -0.11, 0.11, -0.1, -0.18, 0.32, -0.02, -0.14, 0.08, -0.07, 0.04, -0.13, -0.26, 0.17, -0.21, -0.04, 0.08, -0.13, 0.07, -0.04, -0.13, 0.26, -0.17, -0.21, 0.04, -0.08, -0.13, 0.1, 0.04, -0.11, 0.11, 0.15, -0.33, 0.12, 0.16, -0.32, 0.05, 0.0, -0.15, 0.11, 0.15, -0.33, 0.09, 0.0, -0.13, 0.07, -0.04, -0.13, 0.27, -0.15, -0.21, 0.27, -0.16, -0.21, 0.0, -0.11, 0.11, -0.08, -0.17, 0.33, -0.09, -0.18, 0.32, 0.13, 0.0, -0.09, 0.27, -0.15, -0.21, 0.1, 0.0, -0.13, 0.02, -0.04, 0.15, -0.08, -0.17, 0.33, 0.04, -0.08, 0.13, 0.05, 0.0, -0.15, 0.09, 0.15, -0.33, 0.1, 0.15, -0.33, 0.13, 0.0, -0.09, 0.29, -0.15, -0.19, 0.28, -0.15, -0.2, 0.02, -0.04, 0.15, -0.09, -0.15, 0.33, -0.09, -0.16, 0.33, -0.02, 0.04, -0.15, 0.09, 0.15, -0.33, 0.0, 0.0, -0.17, 0.15, -0.04, -0.02, 0.29, -0.15, -0.19, 0.16, 0.0, -0.05, -0.05, 0.0, 0.15, -0.09, -0.15, 0.33, 0.0, 0.0, 0.17, -0.02, 0.04, 0.15, 0.09, 0.15, 0.33, 0.09, 0.16, 0.33, -0.02, 0.04, -0.15, 0.08, 0.17, -0.33, 0.09, 0.16, -0.33, 0.05, 0.0, 0.15, 0.09, 0.15, 0.33, 0.0, 0.0, 0.17, -0.05, 0.0, 0.15, -0.11, -0.15, 0.33, -0.1, -0.15, 0.33, 0.0, 0.11, -0.11, 0.08, 0.17, -0.33, -0.04, 0.08, -0.13, -0.1, -0.04, 0.11, -0.11, -0.15, 0.33, -0.09, 0.0, 0.13, 0.0, 0.11, -0.11, 0.1, 0.18, -0.32, 0.09, 0.18, -0.32, 0.05, 0.0, 0.15, 0.11, 0.15, 0.33, 0.1, 0.15, 0.33, -0.1, -0.04, 0.11, -0.12, -0.17, 0.32, -0.12, -0.16, 0.32, 0.07, 0.11, -0.08, 0.1, 0.18, -0.32, 0.02, 0.14, -0.08, 0.1, 0.04, 0.11, 0.11, 0.15, 0.33, 0.09, 0.0, 0.13, -0.07, -0.11, 0.08, -0.12, -0.17, 0.32, -0.11, -0.08, 0.08, -0.1, -0.11, -0.04, -0.33, -0.18, 0.0, -0.34, -0.18, 0.0, 0.07, 0.11, -0.08, 0.12, 0.17, -0.32, 0.11, 0.18, -0.32, 0.1, 0.04, 0.11, 0.12, 0.17, 0.32, 0.12, 0.16, 0.32, -0.1, -0.11, 0.04, -0.33, -0.18, 0.0, -0.09, -0.14, 0.0, 0.1, 0.04, -0.11, 0.12, 0.17, -0.32, 0.11, 0.08, -0.08, 0.07, 0.11, 0.08, 0.12, 0.17, 0.32, 0.11, 0.08, 0.08, 0.13, 0.04, 0.06, 0.35, 0.15, 0.01, 0.34, 0.16, 0.01, 0.16, 0.0, 0.0, 0.35, 0.15, 0.01, 0.16, 0.0, 0.05, 0.07, 0.11, 0.08, 0.1, 0.18, 0.32, 0.11, 0.18, 0.32, -0.1, -0.11, 0.04, -0.34, -0.17, 0.01, -0.34, -0.18, 0.0, 0.0, 0.11, 0.11, 0.1, 0.18, 0.32, 0.02, 0.14, 0.08, -0.13, -0.04, 0.06, -0.34, -0.17, 0.01, -0.11, -0.08, 0.08, 0.16, 0.0, 0.0, 0.35, 0.15, -0.01, 0.35, 0.15, 0.0, 0.1, -0.11, 0.02, 0.27, -0.18, 0.19, 0.07, -0.14, 0.05, 0.0, 0.11, 0.11, 0.08, 0.17, 0.33, 0.09, 0.18, 0.32, -0.13, -0.04, 0.06, -0.35, -0.15, 0.01, -0.34, -0.16, 0.01, 0.13, 0.04, -0.06, 0.35, 0.15, -0.01, 0.16, 0.0, -0.05, 0.05, -0.11, 0.09, 0.27, -0.18, 0.19, 0.27, -0.18, 0.2, -0.02, 0.04, 0.15, 0.08, 0.17, 0.33, -0.04, 0.08, 0.13, -0.16, 0.0, 0.0, -0.35, -0.15, 0.01, -0.16, 0.0, 0.05, -0.15, 0.04, 0.02, -0.29, 0.15, 0.19, -0.29, 0.16, 0.19, 0.13, 0.04, -0.06, 0.34, 0.17, -0.01, 0.34, 0.16, -0.01, 0.14, -0.08, 0.0, 0.14, -0.08, 0.0, 0.1, -0.11, 0.02, 0.1, -0.11, 0.02, 0.07, -0.14, 0.05, 0.07, -0.14, 0.0, 0.07, -0.14, 0.05, 0.07, -0.14, 0.05, 0.07, -0.14, 0.0, 0.07, -0.14, 0.0, 0.07, -0.14, -0.05, 0.07, -0.14, -0.05, 0.1, -0.11, -0.02, 0.14, -0.08, 0.0, 0.1, -0.11, 0.02, 0.07, -0.14, 0.0, 0.07, -0.14, -0.05, 0.1, -0.11, -0.02, -0.02, -0.14, -0.08, -0.02, -0.14, -0.08, -0.05, -0.14, -0.04, -0.05, -0.14, -0.04, -0.08, -0.14, 0.0, -0.1, -0.11, -0.04, -0.08, -0.14, 0.0, -0.09, -0.14, 0.0, -0.1, -0.11, -0.04, -0.1, -0.11, -0.04, -0.11, -0.08, -0.08, -0.11, -0.08, -0.08, -0.07, -0.11, -0.08, -0.02, -0.14, -0.08, -0.05, -0.14, -0.04, -0.1, -0.11, -0.04, -0.11, -0.08, -0.08, -0.07, -0.11, -0.08, -0.02, -0.14, 0.08, -0.02, -0.14, 0.08, 0.02, -0.14, 0.06, 0.02, -0.14, 0.06, 0.07, -0.14, 0.05, 0.07, -0.14, 0.05, 0.07, -0.14, 0.05, 0.05, -0.11, 0.09, 0.02, -0.14, 0.06, 0.05, -0.11, 0.09, 0.04, -0.08, 0.13, 0.0, -0.11, 0.11, 0.02, -0.14, 0.06, 0.05, -0.11, 0.09, 0.0, -0.11, 0.11, 0.04, -0.08, 0.13, 0.04, -0.08, 0.13, 0.0, -0.11, 0.11, 0.07, -0.14, -0.05, 0.07, -0.14, -0.05, 0.02, -0.14, -0.06, 0.02, -0.14, -0.06, -0.02, -0.14, -0.08, -0.02, -0.14, -0.08, -0.02, -0.14, -0.08, 0.0, -0.11, -0.11, 0.02, -0.14, -0.06, 0.0, -0.11, -0.11, 0.04, -0.08, -0.13, 0.05, -0.11, -0.09, 0.02, -0.14, -0.06, 0.0, -0.11, -0.11, 0.05, -0.11, -0.09, 0.04, -0.08, -0.13, 0.04, -0.08, -0.13, 0.05, -0.11, -0.09, 0.0, 0.0, 0.17, 0.0, 0.0, 0.17, 0.05, 0.0, 0.15, 0.0, 0.0, 0.17, 0.02, -0.04, 0.15, 0.05, 0.0, 0.15, 0.02, -0.04, 0.15, 0.04, -0.08, 0.13, 0.04, -0.08, 0.13, 0.04, -0.08, 0.13, 0.07, -0.04, 0.13, 0.02, -0.04, 0.15, 0.07, -0.04, 0.13, 0.1, 0.0, 0.13, 0.05, 0.0, 0.15, 0.02, -0.04, 0.15, 0.07, -0.04, 0.13, 0.05, 0.0, 0.15, 0.09, 0.0, 0.13, 0.1, 0.0, 0.13, 0.13, 0.0, 0.09, 0.13, 0.0, 0.09, 0.16, 0.0, 0.05, 0.16, 0.0, 0.05, 0.13, 0.04, 0.06, 0.11, 0.08, 0.08, 0.1, 0.04, 0.11, 0.11, 0.08, 0.08, 0.11, 0.08, 0.08, 0.1, 0.04, 0.11, 0.13, 0.0, 0.09, 0.16, 0.0, 0.05, 0.13, 0.04, 0.06, 0.1, 0.04, 0.11, 0.09, 0.0, 0.13, 0.13, 0.0, 0.09, 0.16, 0.0, 0.05, 0.16, 0.0, 0.05, 0.16, 0.0, 0.0, 0.16, 0.0, 0.05, 0.15, -0.04, 0.02, 0.16, 0.0, 0.0, 0.15, -0.04, 0.02, 0.14, -0.08, 0.0, 0.14, -0.08, 0.0, 0.14, -0.08, 0.0, 0.15, -0.04, -0.02, 0.15, -0.04, 0.02, 0.15, -0.04, -0.02, 0.16, 0.0, -0.05, 0.16, 0.0, 0.0, 0.15, -0.04, 0.02, 0.15, -0.04, -0.02, 0.16, 0.0, 0.0, -0.1, 0.0, 0.13, -0.09, 0.0, 0.13, -0.05, 0.0, 0.15, -0.05, 0.0, 0.15, 0.0, 0.0, 0.17, 0.0, 0.0, 0.17, -0.02, 0.04, 0.15, -0.04, 0.08, 0.13, -0.07, 0.04, 0.13, -0.04, 0.08, 0.13, -0.04, 0.08, 0.13, -0.07, 0.04, 0.13, -0.05, 0.0, 0.15, 0.0, 0.0, 0.17, -0.02, 0.04, 0.15, -0.07, 0.04, 0.13, -0.1, 0.0, 0.13, -0.05, 0.0, 0.15, -0.16, 0.0, -0.05, -0.16, 0.0, -0.05, -0.16, 0.0, 0.0, -0.16, 0.0, 0.0, -0.16, 0.0, 0.05, -0.16, 0.0, 0.05, -0.15, 0.04, 0.02, -0.14, 0.08, 0.0, -0.14, 0.08, 0.0, -0.16, 0.0, 0.0, -0.16, 0.0, 0.05, -0.15, 0.04, 0.02, -0.15, 0.04, -0.02, -0.16, 0.0, -0.05, -0.16, 0.0, 0.0, -0.15, 0.04, 0.02, -0.14, 0.08, 0.0, -0.15, 0.04, -0.02, 0.0, 0.0, -0.17, 0.0, 0.0, -0.17, -0.05, 0.0, -0.15, -0.05, 0.0, -0.15, -0.09, 0.0, -0.13, -0.1, 0.0, -0.13, -0.1, 0.0, -0.13, -0.07, 0.04, -0.13, -0.05, 0.0, -0.15, -0.07, 0.04, -0.13, -0.04, 0.08, -0.13, -0.02, 0.04, -0.15, -0.05, 0.0, -0.15, -0.07, 0.04, -0.13, -0.02, 0.04, -0.15, -0.04, 0.08, -0.13, -0.04, 0.08, -0.13, -0.02, 0.04, -0.15, -0.16, 0.0, 0.05, -0.16, 0.0, 0.05, -0.13, 0.0, 0.09, -0.16, 0.0, 0.05, -0.13, -0.04, 0.06, -0.13, 0.0, 0.09, -0.13, -0.04, 0.06, -0.11, -0.08, 0.08, -0.11, -0.08, 0.08, -0.11, -0.08, 0.08, -0.1, -0.04, 0.11, -0.13, -0.04, 0.06, -0.1, -0.04, 0.11, -0.09, 0.0, 0.13, -0.13, 0.0, 0.09, -0.13, -0.04, 0.06, -0.1, -0.04, 0.11, -0.13, 0.0, 0.09, -0.1, 0.0, -0.13, -0.09, 0.0, -0.13, -0.13, 0.0, -0.09, -0.09, 0.0, -0.13, -0.1, -0.04, -0.11, -0.13, 0.0, -0.09, -0.1, -0.04, -0.11, -0.11, -0.08, -0.08, -0.11, -0.08, -0.08, -0.13, -0.04, -0.06, -0.16, 0.0, -0.05, -0.13, 0.0, -0.09, -0.16, 0.0, -0.05, -0.16, 0.0, -0.05, -0.13, 0.0, -0.09, -0.1, -0.04, -0.11, -0.11, -0.08, -0.08, -0.13, -0.04, -0.06, 0.09, 0.0, -0.13, 0.1, 0.0, -0.13, 0.05, 0.0, -0.15, 0.1, 0.0, -0.13, 0.07, -0.04, -0.13, 0.05, 0.0, -0.15, 0.07, -0.04, -0.13, 0.04, -0.08, -0.13, 0.04, -0.08, -0.13, 0.02, -0.04, -0.15, 0.0, 0.0, -0.17, 0.05, 0.0, -0.15, 0.0, 0.0, -0.17, 0.0, 0.0, -0.17, 0.05, 0.0, -0.15, 0.07, -0.04, -0.13, 0.04, -0.08, -0.13, 0.02, -0.04, -0.15, 0.16, 0.0, -0.05, 0.16, 0.0, -0.05, 0.13, 0.0, -0.09, 0.13, 0.0, -0.09, 0.1, 0.0, -0.13, 0.09, 0.0, -0.13, 0.09, 0.0, -0.13, 0.1, 0.04, -0.11, 0.13, 0.0, -0.09, 0.1, 0.04, -0.11, 0.11, 0.08, -0.08, 0.13, 0.04, -0.06, 0.13, 0.0, -0.09, 0.1, 0.04, -0.11, 0.13, 0.04, -0.06, 0.11, 0.08, -0.08, 0.11, 0.08, -0.08, 0.13, 0.04, -0.06, 0.02, 0.14, 0.08, 0.02, 0.14, 0.08, 0.05, 0.14, 0.04, 0.02, 0.14, 0.08, 0.07, 0.11, 0.08, 0.05, 0.14, 0.04, 0.07, 0.11, 0.08, 0.11, 0.08, 0.08, 0.1, 0.11, 0.04, 0.11, 0.08, 0.08, 0.11, 0.08, 0.08, 0.1, 0.11, 0.04, 0.1, 0.11, 0.04, 0.09, 0.14, 0.0, 0.08, 0.14, 0.0, 0.1, 0.11, 0.04, 0.08, 0.14, 0.0, 0.05, 0.14, 0.04, -0.07, 0.14, 0.05, -0.07, 0.14, 0.05, -0.02, 0.14, 0.06, -0.07, 0.14, 0.05, -0.05, 0.11, 0.09, -0.02, 0.14, 0.06, -0.05, 0.11, 0.09, -0.04, 0.08, 0.13, -0.04, 0.08, 0.13, 0.0, 0.11, 0.11, 0.02, 0.14, 0.08, -0.02, 0.14, 0.06, 0.02, 0.14, 0.08, 0.02, 0.14, 0.08, -0.02, 0.14, 0.06, -0.05, 0.11, 0.09, -0.04, 0.08, 0.13, 0.0, 0.11, 0.11, -0.07, 0.14, -0.05, -0.07, 0.14, -0.05, -0.07, 0.14, 0.0, -0.07, 0.14, -0.05, -0.1, 0.11, -0.02, -0.07, 0.14, 0.0, -0.1, 0.11, -0.02, -0.14, 0.08, 0.0, -0.14, 0.08, 0.0, -0.1, 0.11, 0.02, -0.07, 0.14, 0.05, -0.07, 0.14, 0.0, -0.07, 0.14, 0.05, -0.07, 0.14, 0.05, -0.07, 0.14, 0.0, -0.1, 0.11, -0.02, -0.14, 0.08, 0.0, -0.1, 0.11, 0.02, 0.02, 0.14, -0.08, 0.02, 0.14, -0.08, -0.02, 0.14, -0.06, 0.02, 0.14, -0.08, 0.0, 0.11, -0.11, -0.02, 0.14, -0.06, 0.0, 0.11, -0.11, -0.04, 0.08, -0.13, -0.04, 0.08, -0.13, -0.05, 0.11, -0.09, -0.07, 0.14, -0.05, -0.02, 0.14, -0.06, -0.07, 0.14, -0.05, -0.07, 0.14, -0.05, -0.02, 0.14, -0.06, 0.0, 0.11, -0.11, -0.04, 0.08, -0.13, -0.05, 0.11, -0.09, 0.08, 0.14, 0.0, 0.09, 0.14, 0.0, 0.1, 0.11, -0.04, 0.1, 0.11, -0.04, 0.11, 0.08, -0.08, 0.11, 0.08, -0.08, 0.07, 0.11, -0.08, 0.02, 0.14, -0.08, 0.05, 0.14, -0.04, 0.02, 0.14, -0.08, 0.02, 0.14, -0.08, 0.05, 0.14, -0.04, 0.1, 0.11, -0.04, 0.11, 0.08, -0.08, 0.07, 0.11, -0.08, 0.05, 0.14, -0.04, 0.08, 0.14, 0.0, 0.1, 0.11, -0.04, 0.11, 0.08, 0.08, 0.13, 0.04, 0.06, 0.13, 0.04, 0.06, 0.02, -0.04, 0.15, 0.0, 0.0, 0.17, 0.0, 0.0, 0.17, 0.13, 0.0, -0.09, 0.16, 0.0, -0.05, 0.16, 0.0, -0.05, 0.05, 0.0, -0.15, 0.0, 0.0, -0.17, 0.0, 0.0, -0.17, 0.04, -0.08, 0.13, 0.02, -0.04, 0.15, 0.02, -0.04, 0.15, 0.1, 0.0, -0.13, 0.13, 0.0, -0.09, 0.13, 0.0, -0.09, 0.0, -0.11, 0.11, 0.04, -0.08, 0.13, 0.04, -0.08, 0.13, 0.07, -0.04, -0.13, 0.1, 0.0, -0.13, 0.1, 0.0, -0.13, 0.09, 0.0, -0.13, 0.05, 0.0, -0.15, 0.05, 0.0, -0.15, 0.1, 0.04, -0.11, 0.09, 0.0, -0.13, 0.09, 0.0, -0.13, 0.04, -0.08, -0.13, 0.07, -0.04, -0.13, 0.07, -0.04, -0.13, -0.04, 0.08, -0.13, -0.07, 0.04, -0.13, -0.07, 0.04, -0.13, -0.02, -0.14, 0.08, 0.0, -0.11, 0.11, 0.0, -0.11, 0.11, 0.05, -0.11, -0.09, 0.04, -0.08, -0.13, 0.04, -0.08, -0.13, -0.05, 0.11, -0.09, -0.04, 0.08, -0.13, -0.04, 0.08, -0.13, -0.07, -0.11, 0.08, -0.02, -0.14, 0.08, -0.02, -0.14, 0.08, 0.07, -0.14, 0.05, 0.1, -0.11, 0.02, 0.1, -0.11, 0.02, 0.07, -0.14, -0.05, 0.05, -0.11, -0.09, 0.05, -0.11, -0.09, -0.07, 0.14, -0.05, -0.05, 0.11, -0.09, -0.05, 0.11, -0.09, 0.05, -0.11, 0.09, 0.07, -0.14, 0.05, 0.07, -0.14, 0.05, 0.1, -0.11, -0.02, 0.07, -0.14, -0.05, 0.07, -0.14, -0.05, -0.1, 0.11, -0.02, -0.07, 0.14, -0.05, -0.07, 0.14, -0.05, 0.04, -0.08, 0.13, 0.05, -0.11, 0.09, 0.05, -0.11, 0.09, -0.14, 0.08, 0.0, -0.1, 0.11, -0.02, -0.1, 0.11, -0.02, 0.07, -0.04, 0.13, 0.04, -0.08, 0.13, 0.04, -0.08, 0.13, -0.07, 0.14, 0.05, -0.02, 0.14, 0.06, -0.02, 0.14, 0.06, 0.14, -0.08, 0.0, 0.1, -0.11, -0.02, 0.1, -0.11, -0.02, -0.15, 0.04, -0.02, -0.14, 0.08, 0.0, -0.14, 0.08, 0.0, -0.07, 0.14, 0.0, -0.07, 0.14, 0.05, -0.07, 0.14, 0.05, 0.15, -0.04, -0.02, 0.14, -0.08, 0.0, 0.14, -0.08, 0.0, 0.1, 0.0, 0.13, 0.07, -0.04, 0.13, 0.07, -0.04, 0.13, 0.04, -0.08, -0.13, 0.0, -0.11, -0.11, 0.0, -0.11, -0.11, -0.16, 0.0, -0.05, -0.15, 0.04, -0.02, -0.15, 0.04, -0.02, 0.13, 0.0, 0.09, 0.1, 0.0, 0.13, 0.1, 0.0, 0.13, -0.07, 0.14, -0.05, -0.07, 0.14, 0.0, -0.07, 0.14, 0.0, 0.02, -0.04, -0.15, 0.04, -0.08, -0.13, 0.04, -0.08, -0.13, -0.13, 0.0, -0.09, -0.16, 0.0, -0.05, -0.16, 0.0, -0.05, -0.02, 0.14, -0.06, -0.07, 0.14, -0.05, -0.07, 0.14, -0.05, 0.16, 0.0, 0.05, 0.13, 0.0, 0.09, 0.13, 0.0, 0.09, 0.0, 0.0, -0.17, 0.02, -0.04, -0.15, 0.02, -0.04, -0.15, 0.15, -0.04, 0.02, 0.16, 0.0, 0.05, 0.16, 0.0, 0.05, 0.02, 0.14, -0.08, -0.02, 0.14, -0.06, -0.02, 0.14, -0.06, -0.05, 0.0, -0.15, 0.0, 0.0, -0.17, 0.0, 0.0, -0.17, -0.1, 0.0, -0.13, -0.13, 0.0, -0.09, -0.13, 0.0, -0.09, 0.05, 0.14, -0.04, 0.02, 0.14, -0.08, 0.02, 0.14, -0.08, -0.07, 0.04, -0.13, -0.1, 0.0, -0.13, -0.1, 0.0, -0.13, -0.09, 0.0, -0.13, -0.05, 0.0, -0.15, -0.05, 0.0, -0.15, -0.14, 0.08, 0.0, -0.15, 0.04, 0.02, -0.15, 0.04, 0.02, 0.14, -0.08, 0.0, 0.15, -0.04, 0.02, 0.15, -0.04, 0.02, 0.08, 0.14, 0.0, 0.05, 0.14, -0.04, 0.05, 0.14, -0.04, -0.1, -0.04, -0.11, -0.09, 0.0, -0.13, -0.09, 0.0, -0.13, -0.1, 0.11, 0.02, -0.14, 0.08, 0.0, -0.14, 0.08, 0.0, 0.1, -0.11, 0.02, 0.14, -0.08, 0.0, 0.14, -0.08, 0.0, 0.05, 0.14, 0.04, 0.08, 0.14, 0.0, 0.08, 0.14, 0.0, -0.02, -0.14, 0.08, -0.05, -0.14, 0.04, -0.05, -0.14, 0.04, -0.11, -0.08, -0.08, -0.1, -0.04, -0.11, -0.1, -0.04, -0.11, -0.07, 0.14, 0.05, -0.1, 0.11, 0.02, -0.1, 0.11, 0.02, 0.02, -0.14, 0.06, -0.02, -0.14, 0.08, -0.02, -0.14, 0.08, -0.07, -0.11, -0.08, -0.11, -0.08, -0.08, -0.11, -0.08, -0.08, -0.05, 0.11, 0.09, -0.07, 0.14, 0.05, -0.07, 0.14, 0.05, 0.02, 0.14, 0.08, 0.05, 0.14, 0.04, 0.05, 0.14, 0.04, -0.09, -0.14, 0.0, -0.08, -0.14, 0.0, -0.1, -0.11, 0.04, -0.08, -0.14, 0.0, -0.05, -0.14, 0.04, -0.1, -0.11, 0.04, -0.05, -0.14, 0.04, -0.02, -0.14, 0.08, -0.02, -0.14, 0.08, -0.02, -0.14, 0.08, -0.07, -0.11, 0.08, -0.05, -0.14, 0.04, -0.07, -0.11, 0.08, -0.11, -0.08, 0.08, -0.1, -0.11, 0.04, -0.05, -0.14, 0.04, -0.07, -0.11, 0.08, -0.1, -0.11, 0.04, -0.02, -0.14, -0.08, -0.07, -0.11, -0.08, -0.07, -0.11, -0.08, 0.14, -0.08, 0.0, 0.15, -0.04, 0.02, 0.15, -0.04, 0.02, -0.07, 0.04, 0.13, -0.04, 0.08, 0.13, -0.04, 0.08, 0.13, 0.1, 0.11, 0.04, 0.11, 0.08, 0.08, 0.11, 0.08, 0.08, 0.0, -0.11, -0.11, -0.02, -0.14, -0.08, -0.02, -0.14, -0.08, -0.11, -0.08, -0.08, -0.1, -0.11, -0.04, -0.1, -0.11, -0.04, 0.15, -0.04, 0.02, 0.16, 0.0, 0.05, 0.16, 0.0, 0.05, -0.1, 0.0, 0.13, -0.07, 0.04, 0.13, -0.07, 0.04, 0.13, 0.09, 0.14, 0.0, 0.1, 0.11, 0.04, 0.1, 0.11, 0.04, -0.13, -0.04, -0.06, -0.11, -0.08, -0.08, -0.11, -0.08, -0.08, 0.07, -0.14, 0.05, 0.02, -0.14, 0.06, 0.02, -0.14, 0.06, -0.13, 0.0, 0.09, -0.1, 0.0, 0.13, -0.1, 0.0, 0.13, 0.1, 0.11, -0.04, 0.09, 0.14, 0.0, 0.09, 0.14, 0.0, 0.13, 0.0, 0.09, 0.1, 0.0, 0.13, 0.1, 0.0, 0.13, -0.16, 0.0, -0.05, -0.13, -0.04, -0.06, -0.13, -0.04, -0.06, -0.02, -0.14, 0.08, -0.05, -0.14, 0.04, -0.05, -0.14, 0.04, 0.11, 0.08, -0.08, 0.1, 0.11, -0.04, 0.1, 0.11, -0.04, -0.16, 0.0, 0.0, -0.16, 0.0, -0.05, -0.16, 0.0, -0.05, -0.16, 0.0, 0.05, -0.13, 0.0, 0.09, -0.13, 0.0, 0.09, 0.13, 0.04, -0.06, 0.11, 0.08, -0.08, 0.11, 0.08, -0.08, 0.07, -0.04, 0.13, 0.04, -0.08, 0.13, 0.04, -0.08, 0.13, -0.15, 0.04, 0.02, -0.16, 0.0, 0.05, -0.16, 0.0, 0.05, -0.16, 0.0, 0.05, -0.16, 0.0, 0.0, -0.16, 0.0, 0.0, 0.16, 0.0, 0.05, 0.13, 0.0, 0.09, 0.13, 0.0, 0.09, -0.04, 0.08, 0.13, -0.02, 0.04, 0.15, -0.02, 0.04, 0.15, 0.16, 0.0, -0.05, 0.13, 0.04, -0.06, 0.13, 0.04, -0.06, -0.13, -0.04, 0.06, -0.16, 0.0, 0.05, -0.16, 0.0, 0.05, 0.04, -0.08, 0.13, 0.05, -0.11, 0.09, 0.05, -0.11, 0.09, 0.0, 0.11, 0.11, -0.04, 0.08, 0.13, -0.04, 0.08, 0.13, 0.16, 0.0, 0.0, 0.16, 0.0, -0.05, 0.16, 0.0, -0.05, -0.11, -0.08, 0.08, -0.13, -0.04, 0.06, -0.13, -0.04, 0.06, 0.1, 0.0, 0.13, 0.07, -0.04, 0.13, 0.07, -0.04, 0.13, 0.02, 0.14, 0.08, 0.0, 0.11, 0.11, 0.0, 0.11, 0.11, -0.1, -0.11, 0.04, -0.11, -0.08, 0.08, -0.11, -0.08, 0.08, 0.07, 0.11, 0.08, 0.02, 0.14, 0.08, 0.02, 0.14, 0.08, 0.16, 0.0, 0.05, 0.16, 0.0, 0.0, 0.16, 0.0, 0.0, 0.05, -0.11, 0.09, 0.07, -0.14, 0.05, 0.07, -0.14, 0.05, 0.13, 0.04, 0.06, 0.16, 0.0, 0.05, 0.16, 0.0, 0.05, 0.07, -0.14, 0.05, 0.1, -0.11, 0.02, 0.1, -0.11, 0.02, 0.11, 0.08, 0.08, 0.07, 0.11, 0.08, 0.07, 0.11, 0.08, 0.11, 0.08, -0.08, 0.1, 0.04, -0.11, 0.1, 0.04, -0.11, -0.09, -0.14, 0.0, -0.1, -0.11, 0.04, -0.1, -0.11, 0.04, 0.1, 0.04, 0.11, 0.11, 0.08, 0.08, 0.11, 0.08, 0.08, 0.07, 0.11, -0.08, 0.11, 0.08, -0.08, 0.11, 0.08, -0.08, -0.1, -0.11, -0.04, -0.09, -0.14, 0.0, -0.09, -0.14, 0.0, -0.11, -0.08, 0.08, -0.07, -0.11, 0.08, -0.07, -0.11, 0.08, 0.09, 0.0, 0.13, 0.1, 0.04, 0.11, 0.1, 0.04, 0.11, 0.02, 0.14, -0.08, 0.07, 0.11, -0.08, 0.07, 0.11, -0.08, -0.1, -0.04, 0.11, -0.11, -0.08, 0.08, -0.11, -0.08, 0.08, 0.05, 0.0, 0.15, 0.09, 0.0, 0.13, 0.09, 0.0, 0.13, 0.0, 0.11, -0.11, 0.02, 0.14, -0.08, 0.02, 0.14, -0.08, -0.09, 0.0, 0.13, -0.1, -0.04, 0.11, -0.1, -0.04, 0.11, -0.04, 0.08, -0.13, 0.0, 0.11, -0.11, 0.0, 0.11, -0.11, -0.05, 0.0, 0.15, -0.09, 0.0, 0.13, -0.09, 0.0, 0.13, 0.0, 0.0, 0.17, 0.05, 0.0, 0.15, 0.05, 0.0, 0.15, -0.02, 0.04, -0.15, -0.04, 0.08, -0.13, -0.04, 0.08, -0.13, -0.02, 0.04, 0.15, 0.0, 0.0, 0.17, 0.0, 0.0, 0.17, 0.0, 0.0, 0.17, -0.05, 0.0, 0.15, -0.05, 0.0, 0.15, 0.16, 0.0, -0.05, 0.15, -0.04, -0.02, 0.15, -0.04, -0.02, 0.0, 0.0, -0.17, -0.02, 0.04, -0.15, -0.02, 0.04, -0.15, 0.16, 0.0, -0.05, 0.15, -0.04, -0.02, 0.15, -0.04, -0.02, 0.0, 0.0, 0.17, -0.05, 0.0, 0.15, -0.05, 0.0, 0.15, -0.02, 0.04, 0.15, 0.0, 0.0, 0.17, 0.0, 0.0, 0.17, -0.02, 0.04, -0.15, -0.04, 0.08, -0.13, -0.04, 0.08, -0.13, 0.0, 0.0, 0.17, 0.05, 0.0, 0.15, 0.05, 0.0, 0.15, -0.05, 0.0, 0.15, -0.09, 0.0, 0.13, -0.09, 0.0, 0.13, -0.04, 0.08, -0.13, 0.0, 0.11, -0.11, 0.0, 0.11, -0.11, -0.09, 0.0, 0.13, -0.1, -0.04, 0.11, -0.1, -0.04, 0.11, 0.0, 0.11, -0.11, 0.02, 0.14, -0.08, 0.02, 0.14, -0.08, 0.05, 0.0, 0.15, 0.09, 0.0, 0.13, 0.09, 0.0, 0.13, -0.1, -0.04, 0.11, -0.11, -0.08, 0.08, -0.11, -0.08, 0.08, 0.02, 0.14, -0.08, 0.07, 0.11, -0.08, 0.07, 0.11, -0.08, 0.09, 0.0, 0.13, 0.1, 0.04, 0.11, 0.1, 0.04, 0.11, -0.11, -0.08, 0.08, -0.07, -0.11, 0.08, -0.07, -0.11, 0.08, -0.1, -0.11, -0.04, -0.09, -0.14, 0.0, -0.09, -0.14, 0.0, 0.07, 0.11, -0.08, 0.11, 0.08, -0.08, 0.11, 0.08, -0.08, 0.1, 0.04, 0.11, 0.11, 0.08, 0.08, 0.11, 0.08, 0.08, -0.09, -0.14, 0.0, -0.1, -0.11, 0.04, -0.1, -0.11, 0.04, 0.11, 0.08, -0.08, 0.1, 0.04, -0.11, 0.1, 0.04, -0.11, 0.11, 0.08, 0.08, 0.07, 0.11, 0.08, 0.07, 0.11, 0.08, 0.13, 0.04, 0.06, 0.16, 0.0, 0.05, 0.16, 0.0, 0.05, 0.16, 0.0, 0.05, 0.16, 0.0, 0.0, 0.16, 0.0, 0.0, 0.07, 0.11, 0.08, 0.02, 0.14, 0.08, 0.02, 0.14, 0.08, -0.1, -0.11, 0.04, -0.11, -0.08, 0.08, -0.11, -0.08, 0.08, 0.02, 0.14, 0.08, 0.0, 0.11, 0.11, 0.0, 0.11, 0.11, -0.11, -0.08, 0.08, -0.13, -0.04, 0.06, -0.13, -0.04, 0.06, 0.16, 0.0, 0.0, 0.16, 0.0, -0.05, 0.16, 0.0, -0.05, -0.05, -0.14, 0.04, -0.08, -0.14, 0.0, -0.08, -0.14, 0.0, 0.0, 0.11, 0.11, -0.04, 0.08, 0.13, -0.04, 0.08, 0.13, -0.13, -0.04, 0.06, -0.16, 0.0, 0.05, -0.16, 0.0, 0.05, 0.16, 0.0, -0.05, 0.13, 0.04, -0.06, 0.13, 0.04, -0.06, -0.08, -0.14, 0.0, -0.05, -0.14, -0.04, -0.05, -0.14, -0.04, -0.04, 0.08, 0.13, -0.02, 0.04, 0.15, -0.02, 0.04, 0.15, -0.16, 0.0, 0.05, -0.16, 0.0, 0.0, -0.16, 0.0, 0.0, -0.15, 0.04, 0.02, -0.16, 0.0, 0.05, -0.16, 0.0, 0.05, 0.13, 0.04, -0.06, 0.11, 0.08, -0.08, 0.11, 0.08, -0.08, -0.16, 0.0, 0.05, -0.13, 0.0, 0.09, -0.13, 0.0, 0.09, -0.16, 0.0, 0.0, -0.16, 0.0, -0.05, -0.16, 0.0, -0.05, 0.11, 0.08, -0.08, 0.1, 0.11, -0.04, 0.1, 0.11, -0.04, -0.05, -0.14, -0.04, -0.02, -0.14, -0.08, -0.02, -0.14, -0.08, -0.16, 0.0, -0.05, -0.13, -0.04, -0.06, -0.13, -0.04, -0.06, -0.02, -0.14, -0.08, 0.02, -0.14, -0.06, 0.02, -0.14, -0.06, 0.1, 0.11, -0.04, 0.09, 0.14, 0.0, 0.09, 0.14, 0.0, -0.13, 0.0, 0.09, -0.1, 0.0, 0.13, -0.1, 0.0, 0.13, -0.13, -0.04, -0.06, -0.11, -0.08, -0.08, -0.11, -0.08, -0.08, 0.09, 0.14, 0.0, 0.1, 0.11, 0.04, 0.1, 0.11, 0.04, 0.02, -0.14, -0.06, 0.07, -0.14, -0.05, 0.07, -0.14, -0.05, -0.1, 0.0, 0.13, -0.07, 0.04, 0.13, -0.07, 0.04, 0.13, -0.11, -0.08, -0.08, -0.1, -0.11, -0.04, -0.1, -0.11, -0.04, 0.07, -0.14, -0.05, 0.07, -0.14, 0.0, 0.07, -0.14, 0.0, 0.0, -0.11, -0.11, -0.02, -0.14, -0.08, -0.02, -0.14, -0.08, 0.1, 0.11, 0.04, 0.11, 0.08, 0.08, 0.11, 0.08, 0.08, -0.07, 0.04, 0.13, -0.04, 0.08, 0.13, -0.04, 0.08, 0.13, -0.02, -0.14, -0.08, -0.07, -0.11, -0.08, -0.07, -0.11, -0.08, 0.11, 0.08, 0.08, 0.13, 0.04, 0.06, 0.13, 0.04, 0.06, 0.07, -0.14, 0.0, 0.07, -0.14, 0.05, 0.07, -0.14, 0.05, -0.04, 0.08, 0.13, -0.05, 0.11, 0.09, -0.05, 0.11, 0.09, -0.02, 0.14, 0.06, 0.02, 0.14, 0.08, 0.02, 0.14, 0.08, 0.07, -0.14, 0.05, 0.02, -0.14, 0.06, 0.02, -0.14, 0.06, 0.02, -0.14, -0.06, 0.07, -0.14, -0.05, 0.01, -0.38, -0.01, -0.02, 0.14, 0.06, 0.0, 0.38, 0.01, -0.01, 0.38, 0.01, 0.1, -0.11, -0.02, 0.28, -0.18, -0.19, 0.28, -0.17, -0.18, -0.15, 0.04, -0.02, -0.14, 0.08, 0.0, -0.28, 0.17, -0.18, -0.07, 0.14, 0.0, -0.07, 0.14, 0.05, -0.01, 0.38, 0.01, 0.15, -0.04, -0.02, 0.14, -0.08, 0.0, 0.28, -0.17, -0.18, -0.05, -0.14, -0.04, -0.02, -0.14, -0.08, 0.0, -0.38, -0.01, 0.0, -0.11, -0.11, -0.09, -0.18, -0.32, -0.08, -0.17, -0.33, -0.15, 0.04, -0.02, -0.29, 0.16, -0.19, -0.29, 0.15, -0.19, -0.07, 0.14, 0.0, -0.01, 0.38, 0.0, -0.01, 0.38, -0.01, 0.02, -0.04, -0.15, 0.04, -0.08, -0.13, -0.08, -0.17, -0.33, -0.13, 0.0, -0.09, -0.16, 0.0, -0.05, -0.29, 0.15, -0.19, 0.07, -0.14, 0.0, 0.01, -0.38, 0.0, 0.01, -0.38, -0.01, -0.02, 0.14, -0.06, -0.07, 0.14, -0.05, -0.01, 0.38, -0.01, 0.02, -0.04, -0.15, -0.09, -0.16, -0.33, -0.09, -0.15, -0.33, -0.02, 0.14, -0.06, 0.0, 0.38, -0.01, 0.0, 0.38, -0.01, -0.05, 0.0, -0.15, 0.0, 0.0, -0.17, -0.09, -0.15, -0.33, -0.13, 0.0, -0.09, -0.28, 0.15, -0.2, -0.27, 0.15, -0.21, 0.07, -0.14, 0.0, 0.07, -0.14, 0.05, 0.01, -0.38, 0.01, 0.05, 0.14, -0.04, 0.02, 0.14, -0.08, 0.0, 0.38, -0.01, -0.07, 0.04, -0.13, -0.1, 0.0, -0.13, -0.27, 0.15, -0.21, 0.1, -0.11, 0.02, 0.14, -0.08, 0.0, 0.28, -0.17, 0.18, -0.05, 0.0, -0.15, -0.1, -0.15, -0.33, -0.11, -0.15, -0.33, -0.15, 0.04, 0.02, -0.29, 0.16, 0.19, -0.28, 0.17, 0.18, 0.02, -0.14, 0.06, -0.02, -0.14, 0.08, 0.0, -0.38, 0.01, 0.05, 0.14, -0.04, 0.01, 0.38, 0.0, 0.01, 0.38, 0.0, -0.1, -0.04, -0.11, -0.09, 0.0, -0.13, -0.11, -0.15, -0.33, -0.1, 0.11, 0.02, -0.14, 0.08, 0.0, -0.28, 0.17, 0.18, 0.05, 0.14, 0.04, 0.08, 0.14, 0.0, 0.01, 0.38, 0.0, 0.15, -0.04, 0.02, 0.29, -0.16, 0.19, 0.28, -0.17, 0.18, -0.1, -0.04, -0.11, -0.12, -0.16, -0.32, -0.12, -0.17, -0.32, -0.1, 0.11, 0.02, -0.28, 0.18, 0.19, -0.27, 0.18, 0.19, -0.07, -0.11, -0.08, -0.11, -0.08, -0.08, -0.12, -0.17, -0.32, -0.05, 0.11, 0.09, -0.07, 0.14, 0.05, -0.27, 0.18, 0.19, 0.15, -0.04, 0.02, 0.16, 0.0, 0.05, 0.29, -0.15, 0.19, 0.05, 0.14, 0.04, 0.01, 0.38, 0.0, 0.0, 0.38, 0.01, 0.02, -0.14, 0.06, 0.0, -0.38, 0.01, 0.01, -0.38, 0.01, -0.02, 0.14, 0.06, 0.02, 0.14, 0.08, 0.0, 0.38, 0.01, -0.05, 0.11, 0.09, -0.27, 0.18, 0.2, -0.26, 0.17, 0.21, 0.13, 0.0, 0.09, 0.1, 0.0, 0.13, 0.27, -0.15, 0.21, 0.13, 0.04, 0.06, 0.34, 0.16, 0.01, 0.34, 0.17, 0.01, -0.07, -0.11, -0.08, -0.11, -0.18, -0.32, -0.1, -0.18, -0.32, -0.07, 0.04, 0.13, -0.04, 0.08, 0.13, -0.26, 0.17, 0.21, -0.05, -0.14, 0.04, -0.01, -0.38, 0.0, 0.0, -0.38, 0.01, 0.1, 0.11, 0.04, 0.11, 0.08, 0.08, 0.34, 0.17, 0.01, 0.0, -0.11, -0.11, -0.02, -0.14, -0.08, -0.1, -0.18, -0.32, -0.1, -0.11, -0.04, -0.34, -0.18, 0.0, -0.34, -0.17, -0.01, -0.07, 0.04, 0.13, -0.27, 0.16, 0.21, -0.27, 0.15, 0.21, 0.07, -0.04, 0.13, 0.04, -0.08, 0.13, 0.26, -0.17, 0.21, 0.1, 0.11, 0.04, 0.34, 0.18, 0.0, 0.33, 0.18, 0.0, -0.13, -0.04, -0.06, -0.11, -0.08, -0.08, -0.34, -0.17, -0.01, -0.13, 0.0, 0.09, -0.1, 0.0, 0.13, -0.27, 0.15, 0.21, 0.13, 0.0, 0.09, 0.28, -0.15, 0.2, 0.29, -0.15, 0.19, 0.1, 0.11, -0.04, 0.09, 0.14, 0.0, 0.33, 0.18, 0.0, 0.05, -0.11, 0.09, 0.27, -0.18, 0.2, 0.26, -0.17, 0.21, -0.13, -0.04, -0.06, -0.34, -0.16, -0.01, -0.35, -0.15, -0.01, 0.1, 0.11, -0.04, 0.34, 0.18, 0.0, 0.34, 0.17, -0.01, -0.16, 0.0, 0.0, -0.16, 0.0, -0.05, -0.35, -0.15, -0.01, -0.13, 0.0, 0.09, -0.28, 0.15, 0.2, -0.29, 0.15, 0.19, 0.07, -0.04, 0.13, 0.27, -0.16, 0.21, 0.27, -0.15, 0.21, -0.04, 0.08, 0.13, -0.05, 0.11, 0.09, -0.05, 0.11, 0.09, -0.02, 0.14, 0.06, 0.02, 0.14, 0.08, 0.02, 0.14, 0.08, 0.02, -0.14, 0.06, -0.02, -0.14, 0.08, -0.02, -0.14, 0.08, 0.02, 0.14, 0.08, 0.05, 0.14, 0.04, 0.05, 0.14, 0.04, -0.05, 0.11, 0.09, -0.07, 0.14, 0.05, -0.07, 0.14, 0.05, 0.1, -0.11, 0.02, 0.14, -0.08, 0.0, 0.14, -0.08, 0.0, -0.07, -0.11, -0.08, -0.11, -0.08, -0.08, -0.11, -0.08, -0.08, -0.07, 0.14, 0.05, -0.1, 0.11, 0.02, -0.1, 0.11, 0.02, 0.07, -0.14, 0.0, 0.07, -0.14, 0.05, 0.07, -0.14, 0.05, -0.11, -0.08, -0.08, -0.1, -0.04, -0.11, -0.1, -0.04, -0.11, 0.05, 0.14, 0.04, 0.08, 0.14, 0.0, 0.08, 0.14, 0.0, -0.1, 0.11, 0.02, -0.14, 0.08, 0.0, -0.14, 0.08, 0.0, -0.1, -0.04, -0.11, -0.09, 0.0, -0.13, -0.09, 0.0, -0.13, 0.08, 0.14, 0.0, 0.05, 0.14, -0.04, 0.05, 0.14, -0.04, -0.14, 0.08, 0.0, -0.15, 0.04, 0.02, -0.15, 0.04, 0.02, 0.07, -0.14, -0.05, 0.07, -0.14, 0.0, 0.07, -0.14, 0.0, -0.09, 0.0, -0.13, -0.05, 0.0, -0.15, -0.05, 0.0, -0.15, -0.07, 0.04, -0.13, -0.1, 0.0, -0.13, -0.1, 0.0, -0.13, 0.05, 0.14, -0.04, 0.02, 0.14, -0.08, 0.02, 0.14, -0.08, -0.1, 0.0, -0.13, -0.13, 0.0, -0.09, -0.13, 0.0, -0.09, -0.05, 0.0, -0.15, 0.0, 0.0, -0.17, 0.0, 0.0, -0.17, -0.05, -0.14, -0.04, -0.02, -0.14, -0.08, -0.02, -0.14, -0.08, 0.02, 0.14, -0.08, -0.02, 0.14, -0.06, -0.02, 0.14, -0.06, 0.0, 0.0, -0.17, 0.02, -0.04, -0.15, 0.02, -0.04, -0.15, 0.02, -0.14, -0.06, 0.07, -0.14, -0.05, 0.07, -0.14, -0.05, -0.02, 0.14, -0.06, -0.07, 0.14, -0.05, -0.07, 0.14, -0.05, -0.13, 0.0, -0.09, -0.16, 0.0, -0.05, -0.16, 0.0, -0.05, 0.02, -0.04, -0.15, 0.04, -0.08, -0.13, 0.04, -0.08, -0.13, -0.05, -0.14, 0.04, -0.08, -0.14, 0.0, -0.08, -0.14, 0.0, -0.07, 0.14, -0.05, -0.07, 0.14, 0.0, -0.07, 0.14, 0.0, -0.16, 0.0, -0.05, -0.15, 0.04, -0.02, -0.15, 0.04, -0.02, 0.04, -0.08, -0.13, 0.0, -0.11, -0.11, 0.0, -0.11, -0.11, -0.02, -0.14, -0.08, 0.02, -0.14, -0.06, 0.02, -0.14, -0.06, 0.15, -0.04, -0.02, 0.14, -0.08, 0.0, 0.14, -0.08, 0.0, -0.07, 0.14, 0.0, -0.07, 0.14, 0.05, -0.07, 0.14, 0.05, -0.15, 0.04, -0.02, -0.14, 0.08, 0.0, -0.14, 0.08, 0.0, -0.08, -0.14, 0.0, -0.05, -0.14, -0.04, -0.05, -0.14, -0.04, 0.14, -0.08, 0.0, 0.1, -0.11, -0.02, 0.1, -0.11, -0.02, -0.07, 0.14, 0.05, -0.02, 0.14, 0.06, -0.02, 0.14, 0.06, -0.14, 0.08, 0.0, -0.1, 0.11, -0.02, -0.1, 0.11, -0.02, -0.1, 0.11, -0.02, -0.07, 0.14, -0.05, -0.07, 0.14, -0.05, 0.1, -0.11, -0.02, 0.07, -0.14, -0.05, 0.07, -0.14, -0.05, -0.07, 0.14, -0.05, -0.05, 0.11, -0.09, -0.05, 0.11, -0.09, 0.07, -0.14, -0.05, 0.05, -0.11, -0.09, 0.05, -0.11, -0.09, -0.07, -0.11, 0.08, -0.02, -0.14, 0.08, -0.02, -0.14, 0.08, -0.05, 0.11, -0.09, -0.04, 0.08, -0.13, -0.04, 0.08, -0.13, 0.05, -0.11, -0.09, 0.04, -0.08, -0.13, 0.04, -0.08, -0.13, -0.02, -0.14, 0.08, 0.0, -0.11, 0.11, 0.0, -0.11, 0.11, -0.04, 0.08, -0.13, -0.07, 0.04, -0.13, -0.07, 0.04, -0.13, 0.04, -0.08, -0.13, 0.07, -0.04, -0.13, 0.07, -0.04, -0.13, 0.1, 0.04, -0.11, 0.09, 0.0, -0.13, 0.09, 0.0, -0.13, 0.09, 0.0, -0.13, 0.05, 0.0, -0.15, 0.05, 0.0, -0.15, 0.07, -0.04, -0.13, 0.1, 0.0, -0.13, 0.1, 0.0, -0.13, 0.0, -0.11, 0.11, 0.04, -0.08, 0.13, 0.04, -0.08, 0.13, 0.1, 0.0, -0.13, 0.13, 0.0, -0.09, 0.13, 0.0, -0.09, 0.04, -0.08, 0.13, 0.02, -0.04, 0.15, 0.02, -0.04, 0.15, 0.05, 0.0, -0.15, 0.0, 0.0, -0.17, 0.0, 0.0, -0.17, 0.13, 0.0, -0.09, 0.16, 0.0, -0.05, 0.16, 0.0, -0.05, 0.02, -0.04, 0.15, 0.0, 0.0, 0.17, 0.0, 0.0, 0.17, 0.0, 0.0, -0.17, -0.02, 0.04, -0.15, -0.02, 0.04, -0.15, -0.01, -0.38, 0.0, 0.0, -0.39, 0.0, -0.01, -0.38, 0.0, 0.0, -0.38, -0.01, 0.0, -0.39, 0.0, -0.01, -0.38, 0.0, 0.01, -0.38, 0.0, 0.0, -0.39, 0.0, 0.0, -0.38, -0.01, 0.0, -0.38, 0.01, 0.0, -0.39, 0.0, 0.01, -0.38, 0.0, -0.01, -0.38, 0.0, 0.0, -0.39, 0.0, 0.0, -0.38, 0.01, 0.29, -0.16, 0.19, 0.28, -0.17, 0.2, 0.28, -0.18, 0.19, 0.28, -0.15, 0.2, 0.28, -0.17, 0.2, 0.29, -0.16, 0.19, 0.27, -0.16, 0.21, 0.28, -0.17, 0.2, 0.28, -0.15, 0.2, 0.27, -0.18, 0.2, 0.28, -0.17, 0.2, 0.27, -0.16, 0.21, 0.28, -0.18, 0.19, 0.28, -0.17, 0.2, 0.27, -0.18, 0.2, -0.09, -0.18, 0.32, -0.1, -0.17, 0.33, -0.11, -0.18, 0.32, -0.09, -0.16, 0.33, -0.1, -0.17, 0.33, -0.09, -0.18, 0.32, -0.1, -0.15, 0.33, -0.1, -0.17, 0.33, -0.09, -0.16, 0.33, -0.12, -0.16, 0.32, -0.1, -0.17, 0.33, -0.1, -0.15, 0.33, -0.11, -0.18, 0.32, -0.1, -0.17, 0.33, -0.12, -0.16, 0.32, -0.34, -0.18, 0.0, -0.35, -0.17, 0.0, -0.34, -0.18, 0.0, -0.34, -0.16, 0.01, -0.35, -0.17, 0.0, -0.34, -0.18, 0.0, -0.35, -0.15, 0.0, -0.35, -0.17, 0.0, -0.34, -0.16, 0.01, -0.34, -0.16, -0.01, -0.35, -0.17, 0.0, -0.35, -0.15, 0.0, -0.34, -0.18, 0.0, -0.35, -0.17, 0.0, -0.34, -0.16, -0.01, -0.11, -0.18, -0.32, -0.1, -0.17, -0.33, -0.09, -0.18, -0.32, -0.12, -0.16, -0.32, -0.1, -0.17, -0.33, -0.11, -0.18, -0.32, -0.1, -0.15, -0.33, -0.1, -0.17, -0.33, -0.12, -0.16, -0.32, -0.09, -0.16, -0.33, -0.1, -0.17, -0.33, -0.1, -0.15, -0.33, -0.09, -0.18, -0.32, -0.1, -0.17, -0.33, -0.09, -0.16, -0.33, 0.28, -0.18, -0.19, 0.28, -0.17, -0.2, 0.29, -0.16, -0.19, 0.27, -0.18, -0.2, 0.28, -0.17, -0.2, 0.28, -0.18, -0.19, 0.27, -0.16, -0.21, 0.28, -0.17, -0.2, 0.27, -0.18, -0.2, 0.28, -0.15, -0.2, 0.28, -0.17, -0.2, 0.27, -0.16, -0.21, 0.29, -0.16, -0.19, 0.28, -0.17, -0.2, 0.28, -0.15, -0.2, 0.1, 0.15, 0.33, 0.1, 0.17, 0.33, 0.09, 0.16, 0.33, 0.12, 0.16, 0.32, 0.1, 0.17, 0.33, 0.1, 0.15, 0.33, 0.11, 0.18, 0.32, 0.1, 0.17, 0.33, 0.12, 0.16, 0.32, 0.09, 0.18, 0.32, 0.1, 0.17, 0.33, 0.11, 0.18, 0.32, 0.09, 0.16, 0.33, 0.1, 0.17, 0.33, 0.09, 0.18, 0.32, -0.28, 0.15, 0.2, -0.28, 0.17, 0.2, -0.29, 0.16, 0.19, -0.27, 0.16, 0.21, -0.28, 0.17, 0.2, -0.28, 0.15, 0.2, -0.27, 0.18, 0.2, -0.28, 0.17, 0.2, -0.27, 0.16, 0.21, -0.28, 0.18, 0.19, -0.28, 0.17, 0.2, -0.27, 0.18, 0.2, -0.29, 0.16, 0.19, -0.28, 0.17, 0.2, -0.28, 0.18, 0.19, -0.28, 0.15, -0.2, -0.28, 0.17, -0.2, -0.27, 0.16, -0.21, -0.29, 0.16, -0.19, -0.28, 0.17, -0.2, -0.28, 0.15, -0.2, -0.28, 0.18, -0.19, -0.28, 0.17, -0.2, -0.29, 0.16, -0.19, -0.27, 0.18, -0.2, -0.28, 0.17, -0.2, -0.28, 0.18, -0.19, -0.27, 0.16, -0.21, -0.28, 0.17, -0.2, -0.27, 0.18, -0.2, 0.1, 0.15, -0.33, 0.1, 0.17, -0.33, 0.12, 0.16, -0.32, 0.09, 0.16, -0.33, 0.1, 0.17, -0.33, 0.1, 0.15, -0.33, 0.09, 0.18, -0.32, 0.1, 0.17, -0.33, 0.09, 0.16, -0.33, 0.11, 0.18, -0.32, 0.1, 0.17, -0.33, 0.09, 0.18, -0.32, 0.12, 0.16, -0.32, 0.1, 0.17, -0.33, 0.11, 0.18, -0.32, 0.35, 0.15, 0.0, 0.35, 0.17, 0.0, 0.34, 0.16, 0.01, 0.34, 0.16, -0.01, 0.35, 0.17, 0.0, 0.35, 0.15, 0.0, 0.34, 0.18, 0.0, 0.35, 0.17, 0.0, 0.34, 0.16, -0.01, 0.34, 0.18, 0.0, 0.35, 0.17, 0.0, 0.34, 0.18, 0.0, 0.34, 0.16, 0.01, 0.35, 0.17, 0.0, 0.34, 0.18, 0.0, 0.01, 0.38, 0.0, 0.0, 0.39, 0.0, 0.0, 0.38, 0.01, 0.01, 0.38, 0.0, 0.0, 0.39, 0.0, 0.01, 0.38, 0.0, 0.0, 0.38, -0.01, 0.0, 0.39, 0.0, 0.01, 0.38, 0.0, -0.01, 0.38, 0.0, 0.0, 0.39, 0.0, 0.0, 0.38, -0.01, 0.0, 0.38, 0.01, 0.0, 0.39, 0.0, -0.01, 0.38, 0.0, -0.1, 0.11, -0.02, -0.28, 0.18, -0.19, -0.28, 0.17, -0.18, -0.05, -0.14, 0.04, -0.08, -0.14, 0.0, -0.01, -0.38, 0.0, 0.02, -0.14, -0.06, 0.0, -0.38, -0.01, 0.0, -0.38, -0.01, -0.1, 0.11, -0.02, -0.07, 0.14, -0.05, -0.27, 0.18, -0.19, 0.1, -0.11, -0.02, 0.07, -0.14, -0.05, 0.27, -0.18, -0.19, -0.05, 0.11, -0.09, -0.27, 0.18, -0.2, -0.27, 0.18, -0.19, 0.05, -0.11, -0.09, 0.27, -0.18, -0.2, 0.27, -0.18, -0.19, -0.05, -0.14, -0.04, -0.01, -0.38, 0.0, -0.01, -0.38, 0.0, -0.07, -0.11, 0.08, -0.02, -0.14, 0.08, -0.1, -0.18, 0.32, -0.05, 0.11, -0.09, -0.04, 0.08, -0.13, -0.26, 0.17, -0.21, 0.05, -0.11, -0.09, 0.04, -0.08, -0.13, 0.26, -0.17, -0.21, 0.0, -0.11, 0.11, -0.09, -0.18, 0.32, -0.1, -0.18, 0.32, -0.07, 0.04, -0.13, -0.27, 0.16, -0.21, -0.26, 0.17, -0.21, 0.07, -0.04, -0.13, 0.27, -0.16, -0.21, 0.26, -0.17, -0.21, 0.1, 0.04, -0.11, 0.09, 0.0, -0.13, 0.11, 0.15, -0.33, 0.05, 0.0, -0.15, 0.1, 0.15, -0.33, 0.11, 0.15, -0.33, 0.07, -0.04, -0.13, 0.1, 0.0, -0.13, 0.27, -0.15, -0.21, 0.0, -0.11, 0.11, 0.04, -0.08, 0.13, -0.08, -0.17, 0.33, 0.13, 0.0, -0.09, 0.28, -0.15, -0.2, 0.27, -0.15, -0.21, 0.02, -0.04, 0.15, -0.09, -0.16, 0.33, -0.08, -0.17, 0.33, 0.05, 0.0, -0.15, 0.0, 0.0, -0.17, 0.09, 0.15, -0.33, 0.13, 0.0, -0.09, 0.16, 0.0, -0.05, 0.29, -0.15, -0.19, 0.02, -0.04, 0.15, 0.0, 0.0, 0.17, -0.09, -0.15, 0.33, -0.02, 0.04, -0.15, 0.09, 0.16, -0.33, 0.09, 0.15, -0.33, 0.15, -0.04, -0.02, 0.29, -0.16, -0.19, 0.29, -0.15, -0.19, -0.05, 0.0, 0.15, -0.1, -0.15, 0.33, -0.09, -0.15, 0.33, -0.02, 0.04, 0.15, 0.0, 0.0, 0.17, 0.09, 0.15, 0.33, -0.02, 0.04, -0.15, -0.04, 0.08, -0.13, 0.08, 0.17, -0.33, 0.05, 0.0, 0.15, 0.1, 0.15, 0.33, 0.09, 0.15, 0.33, -0.05, 0.0, 0.15, -0.09, 0.0, 0.13, -0.11, -0.15, 0.33, 0.0, 0.11, -0.11, 0.09, 0.18, -0.32, 0.08, 0.17, -0.33, -0.1, -0.04, 0.11, -0.12, -0.16, 0.32, -0.11, -0.15, 0.33, 0.0, 0.11, -0.11, 0.02, 0.14, -0.08, 0.1, 0.18, -0.32, 0.05, 0.0, 0.15, 0.09, 0.0, 0.13, 0.11, 0.15, 0.33, -0.1, -0.04, 0.11, -0.11, -0.08, 0.08, -0.12, -0.17, 0.32, 0.07, 0.11, -0.08, 0.11, 0.18, -0.32, 0.1, 0.18, -0.32, 0.1, 0.04, 0.11, 0.12, 0.16, 0.32, 0.11, 0.15, 0.33, -0.07, -0.11, 0.08, -0.11, -0.18, 0.32, -0.12, -0.17, 0.32, -0.1, -0.11, -0.04, -0.09, -0.14, 0.0, -0.33, -0.18, 0.0, 0.07, 0.11, -0.08, 0.11, 0.08, -0.08, 0.12, 0.17, -0.32, 0.1, 0.04, 0.11, 0.11, 0.08, 0.08, 0.12, 0.17, 0.32, -0.1, -0.11, 0.04, -0.34, -0.18, 0.0, -0.33, -0.18, 0.0, 0.1, 0.04, -0.11, 0.12, 0.16, -0.32, 0.12, 0.17, -0.32, 0.07, 0.11, 0.08, 0.11, 0.18, 0.32, 0.12, 0.17, 0.32, 0.13, 0.04, 0.06, 0.16, 0.0, 0.05, 0.35, 0.15, 0.01, 0.16, 0.0, 0.0, 0.35, 0.15, 0.0, 0.35, 0.15, 0.01, 0.07, 0.11, 0.08, 0.02, 0.14, 0.08, 0.1, 0.18, 0.32, -0.1, -0.11, 0.04, -0.11, -0.08, 0.08, -0.34, -0.17, 0.01, 0.0, 0.11, 0.11, 0.09, 0.18, 0.32, 0.1, 0.18, 0.32, -0.13, -0.04, 0.06, -0.34, -0.16, 0.01, -0.34, -0.17, 0.01, 0.16, 0.0, 0.0, 0.16, 0.0, -0.05, 0.35, 0.15, -0.01, 0.1, -0.11, 0.02, 0.28, -0.18, 0.19, 0.27, -0.18, 0.19, 0.0, 0.11, 0.11, -0.04, 0.08, 0.13, 0.08, 0.17, 0.33, -0.13, -0.04, 0.06, -0.16, 0.0, 0.05, -0.35, -0.15, 0.01, 0.13, 0.04, -0.06, 0.34, 0.16, -0.01, 0.35, 0.15, -0.01, 0.05, -0.11, 0.09, 0.07, -0.14, 0.05, 0.27, -0.18, 0.19, -0.02, 0.04, 0.15, 0.09, 0.16, 0.33, 0.08, 0.17, 0.33, -0.16, 0.0, 0.0, -0.35, -0.15, 0.0, -0.35, -0.15, 0.01, -0.15, 0.04, 0.02, -0.16, 0.0, 0.05, -0.29, 0.15, 0.19, 0.13, 0.04, -0.06, 0.11, 0.08, -0.08, 0.34, 0.17, -0.01];
// Convert all elements to RGB http://jmol.sourceforge.net/jscolors/
// Probably don't need all of these!
// Divide these by 255...
      
const ELEMENT_COLORS = {
  H: [255, 255, 255],
  HE: [217, 255, 255],
  LI: [204, 128, 255],
  BE: [194, 255, 0],
  B: [255, 181, 181],
  C: [144, 144, 144],
  N: [48, 80, 248],
  O: [255, 13, 13],
  F: [144, 224, 80],
  NE: [179, 227, 245],
  NA: [171, 92, 242],
  MG: [138, 255, 0],
  AL: [191, 166, 166],
  SI: [240, 200, 160],
  P: [255, 128, 0],
  S: [255, 255, 48],
  CL: [31, 240, 31],
  BR: [105, 35, 31],
  AS: [189, 128, 227],
  SE: [255, 161, 0],
  I: [148, 0, 148],
  ALTERNATIVE: [208, 208, 224]
};

function drawStripyBond(atom_a, atom_b, color_a, color_b, label, size=0.1, shape, alt){
  console.log('Drawing a Bond...')
  var sx = atom_b[0] - atom_a[0]; 
  var sy = atom_b[1] - atom_a[1];
  var sz = atom_b[2] - atom_a[2];
  length = (sx**2 + sy**2 + sz**2)**.5;
  var unitSlopeX = sx / length;
  var unitSlopeY = sy / length;
  var unitSlopeZ = sz / length;
  atom_a2 = [atom_a[0] + (unitSlopeX * .1),
        atom_a[1] + (unitSlopeY * .1),
        atom_a[2] + (unitSlopeZ * .1)
        ];
  atom_b2 = [atom_b[0] - (unitSlopeX * .1),
        atom_b[1] - (unitSlopeY * .1),
        atom_b[2] - (unitSlopeZ * .1)
        ];
  a1c = color_a
  a2c = color_b
  bond_label = label
  shape.addCylinder(atom_a, atom_b, [a1c[0]/255,a1c[1]/255,a1c[2]/255], size, bond_label); // bond comment goes here! ,'this is bad'
  if (alt){
    shape.addCylinder(atom_a2, atom_b2, [208/255,208/255,224/255], size , bond_label); // bond comment goes here! ,'this is bad'
  } else {
    shape.addCylinder(atom_a2, atom_b2, [a2c[0]/255,a2c[1]/255,a2c[2]/255], size, bond_label); // bond comment goes here! ,'this is bad'
  }  
}

function readFileFixedStyle(file, badids, badcomments){
  //fetch(file).then(response => response.text()).then(function(x){
    let x = file
    badids = badids.split(';').map(x => parseInt(x));
    badcomments = badcomments.split(';')
    var regexp = /[CSONFBHLPIZM]/g; // Should be expanded to all atoms?
    var match,matches = []; 
    while( ( match = regexp.exec(x) ) != null ){ 
        matches.push(match[0]);
    } 
    var idx = [...Array(matches.length).keys()]
    let diff = idx.filter(x => !badids.includes(x)) 
    stage.loadFile(file).then(function(o){
      // Create Frame, balls don't render, nor do bonds
      o.addRepresentation('ball+stick', {aspectRatio:0, radius:0,
                                           multipleBond:'symmetric'}); 
      atom_info = o.object.atomMap.dict;
      atom_info_array = [];
      for (var key in atom_info) {
          atom_info_array.push(key.split('|')[0]);
      }
      // Draw Good Atoms + Bonds
      repr = o.addRepresentation('ball+stick',{
          aspectRatio:2, sele:'@'.concat(diff), multipleBond:'symmetric'});


      let shape = new NGL.Shape("shape", {dashedCylinder: true});
      bonds = o.object.bondStore;
      n = bonds.atomIndex1;
      m = bonds.atomIndex2;
      order = bonds.bondOrder;
      const vShift = new THREE.Vector3()
      o.object.getBondProxy().calculateShiftDir(vShift)
      absOffset = (1 - .4) * .3
      o.object.getBondProxy().calculateShiftDir(vShift)
      vShift.multiplyScalar(absOffset)
      // Render Bonds
      order[0] = 3
      order[1] = 2
      n.forEach((num1, index) => {
        let vt = new THREE.Vector3()
        const num2 = m[index];
        const bondorder = order[index]

        if (badids.includes(num1) || badids.includes(num2) ){
          acoord = [o.object.atomStore.x[num1],
                    o.object.atomStore.y[num1],
                    o.object.atomStore.z[num1]];
          bcoord = [o.object.atomStore.x[num2],
                    o.object.atomStore.y[num2],
                    o.object.atomStore.z[num2]];
          let atype1 = o.object.atomMap.list[o.object.atomStore.atomTypeId[num1]].element
          let atype2 = o.object.atomMap.list[o.object.atomStore.atomTypeId[num2]].element
          colora = ElementColors[atype1];
          colorb = ElementColors[atype2];
          label = 'bond: '.concat(
            o.object.atomMap.list[o.object.atomStore.atomTypeId[num1]].atomname,
            '-', 
            o.object.atomMap.list[o.object.atomStore.atomTypeId[num2]].atomname
          )
          alt = atype1 == atype2
          bond_size = .05 / (0.5 * bondorder)
          if (bondorder === 1) {
            drawStripyBond(acoord, bcoord, colora, colorb, label, bond_size, shape, alt)
          }
          if (bondorder === 2) {
            acoord1 = [acoord[0] - vShift.x, acoord[1] - vShift.y, acoord[2] - vShift.z]
            bcoord1 = [bcoord[0] - vShift.x, bcoord[1] - vShift.y, bcoord[2] - vShift.z]
            acoord2 = [acoord[0] + vShift.x, acoord[1] + vShift.y, acoord[2] + vShift.z]
            bcoord2 = [bcoord[0] + vShift.x, bcoord[1] + vShift.y, bcoord[2] + vShift.z]
            drawStripyBond(acoord1, bcoord1, colora, colorb, label, bond_size, shape, alt)
            drawStripyBond(acoord2, bcoord2, colora, colorb, label, bond_size, shape, alt)
          }
          if (bondorder === 3) {
            acoord1 = [acoord[0] - vShift.x, acoord[1] - vShift.y, acoord[2] - vShift.z]
            bcoord1 = [bcoord[0] - vShift.x, bcoord[1] - vShift.y, bcoord[2] - vShift.z]
            acoord2 = [acoord[0] + vShift.x, acoord[1] + vShift.y, acoord[2] + vShift.z]
            bcoord2 = [bcoord[0] + vShift.x, bcoord[1] + vShift.y, bcoord[2] + vShift.z]
            drawStripyBond(acoord, bcoord, colora, colorb, label, bond_size, shape, alt)
            drawStripyBond(acoord1, bcoord1, colora, colorb, label, bond_size, shape, alt)
            drawStripyBond(acoord2, bcoord2, colora, colorb, label, bond_size, shape, alt)
          }
      }
      }); 
      var bondComp = stage.addComponentFromObject(shape);
      // Render Atoms
      for(id in badids){
        console.log('Drawing an Atom...')
        let origin = [o.object.atomStore.x[badids[id]], 
                      o.object.atomStore.y[badids[id]], 
                      o.object.atomStore.z[badids[id]]
                     ];
        atom_label = 'atom: '.concat(atom_info_array[badids[id]], ' | ', badcomments[id])

        let m = refmesh.map(function (v,i) {return origin[i % 3] + v;});
        let eleC = ElementColors[o.object.atomMap.list[badids[id]].element]
        let col2 = Array(m.length).fill(1).map(function (v,i){
          return eleC[i%3]/255
        }); 
        let col = new Float32Array(col2)    
        let sphere = shape.addSphere(origin, [0,0,0,0], .2, atom_label); // Hack to get atom labels to render.
        // Probably need to create a new shape constructor, with minimum opacity and then render it as needed...
        var meshBuffer = new NGL.MeshBuffer( {
              position: new Float32Array(m),
              color: col
        })
        shape.addBuffer(meshBuffer);
        var shapeComp = stage.addComponentFromObject(shape);
        shapeComp.addRepresentation("buffer");
      };
    });
};

function readPDBFixedStyle(file, badids, badcomments){
  let x = file // Convert from string?
  //fetch(file).then(response => response.text()).then(function(x){
    badids = badids.split(';').map(x => parseInt(x));
    badcomments = badcomments.split(';')
    var regexp = /[CSONFBHLPIZM]/g; // Should be expanded to all atoms?
    var match,matches = []; 
    while( ( match = regexp.exec(x) ) != null ){ 
        matches.push(match[0]);
    } 
    var idx = [...Array(matches.length).keys()]
    let diff = idx.filter(x => !badids.includes(x)) 
    stage.loadFile(file).then(function(o){
      o.addRepresentation('ball+stick', {aspectRatio:0, radius:0,
                                           multipleBond:'symmetric'}); 
      atom_info = o.object.atomMap.dict;
      atom_info_array = [];
      for (var key in atom_info) {
          atom_info_array.push(key.split('|')[0]);
      }
      repr = o.addRepresentation('line',{linewidth:6, sele:'@'.concat(diff), multipleBond:'symmetric'});
      let shape = new NGL.Shape("shape", {dashedCylinder: true});
      bonds = o.object.bondStore;
      n = bonds.atomIndex1;
      m = bonds.atomIndex2;
      order = bonds.bondOrder;
      const vShift = new THREE.Vector3()
      o.object.getBondProxy().calculateShiftDir(vShift)
      absOffset = (1 - .4) * .3
      o.object.getBondProxy().calculateShiftDir(vShift)
      vShift.multiplyScalar(absOffset)
      // Render Bonds
      order[0] = 3
      order[1] = 2
      n.forEach((num1, index) => {
        let vt = new THREE.Vector3()
        const num2 = m[index];
        const bondorder = order[index]
        if (badids.includes(num1) || badids.includes(num2) ){
          acoord = [o.object.atomStore.x[num1],
                    o.object.atomStore.y[num1],
                    o.object.atomStore.z[num1]];
          bcoord = [o.object.atomStore.x[num2],
                    o.object.atomStore.y[num2],
                    o.object.atomStore.z[num2]];
          let atype1 = o.object.atomMap.list[o.object.atomStore.atomTypeId[num1]].element
          let atype2 = o.object.atomMap.list[o.object.atomStore.atomTypeId[num2]].element
          colora = ElementColors[atype1];
          colorb = ElementColors[atype2];
          label = 'bond: '.concat(
            o.object.atomMap.list[o.object.atomStore.atomTypeId[num1]].atomname,
            '-', 
            o.object.atomMap.list[o.object.atomStore.atomTypeId[num2]].atomname
          )
          alt = atype1 == atype2
          bond_size = .05 / (0.5 * bondorder)
          //const vShift = new Vector3()
          if (bondorder === 1) {
            console.log([acoord, bcoord, colora, colorb, label, bond_size, alt])
            drawStripyBond(acoord, bcoord, colora, colorb, label, bond_size, shape, alt)
          }
          if (bondorder === 2) {
            acoord1 = [acoord[0] - vShift.x, acoord[1] - vShift.y, acoord[2] - vShift.z]
            bcoord1 = [bcoord[0] - vShift.x, bcoord[1] - vShift.y, bcoord[2] - vShift.z]
            acoord2 = [acoord[0] + vShift.x, acoord[1] + vShift.y, acoord[2] + vShift.z]
            bcoord2 = [bcoord[0] + vShift.x, bcoord[1] + vShift.y, bcoord[2] + vShift.z]
            drawStripyBond(acoord1, bcoord1, colora, colorb, label, bond_size, shape, alt)
            drawStripyBond(acoord2, bcoord2, colora, colorb, label, bond_size, shape, alt)
          }
          if (bondorder === 3) {
            acoord1 = [acoord[0] - vShift.x, acoord[1] - vShift.y, acoord[2] - vShift.z]
            bcoord1 = [bcoord[0] - vShift.x, bcoord[1] - vShift.y, bcoord[2] - vShift.z]
            acoord2 = [acoord[0] + vShift.x, acoord[1] + vShift.y, acoord[2] + vShift.z]
            bcoord2 = [bcoord[0] + vShift.x, bcoord[1] + vShift.y, bcoord[2] + vShift.z]
            drawStripyBond(acoord, bcoord, colora, colorb, label, bond_size, shape, alt)
            drawStripyBond(acoord1, bcoord1, colora, colorb, label, bond_size, shape, alt)
            drawStripyBond(acoord2, bcoord2, colora, colorb, label, bond_size, shape, alt)
          }
      }
      }); 
      var bondComp = stage.addComponentFromObject(shape);
      // Render Atoms
      for(id in badids){
        console.log('Drawing an Atom...')
        let origin = [o.object.atomStore.x[badids[id]], 
                      o.object.atomStore.y[badids[id]], 
                      o.object.atomStore.z[badids[id]]
                     ];
        atom_label = 'atom: '.concat(atom_info_array[badids[id]], ' | ', badcomments[id])
        let m = refmesh.map(function (v,i) {return origin[i % 3] + v;});
        let eleC = ElementColors[o.object.atomMap.list[o.object.atomStore.atomTypeId[badids[id]]].element]
        let col2 = Array(m.length).fill(1).map(function (v,i){
          return eleC[i%3]/255
        }); 
        let col = new Float32Array(col2)    
        let sphere = shape.addSphere(origin, [0,0,0,0], .2, atom_label); // Hack to get atom labels to render.
        // Probably need to create a new shape constructor, with minimum opacity and then render it as needed...
        var meshBuffer = new NGL.MeshBuffer( {
              position: new Float32Array(m),
              color: col
        })
        shape.addBuffer(meshBuffer);
        var shapeComp = stage.addComponentFromObject(shape);
        shapeComp.addRepresentation("buffer");
      };
    });
};

// readPDBFixedStyle('https://raw.githubusercontent.com/TJGorrie/FourMol/master/Mpro-x10555_0A/Mpro-x10555_0A_apo.pdb',badids = '1258;1259;1257;1256', badcomments = `a;b;c;d`)
//readFileFixedStyle('https://raw.githubusercontent.com/TJGorrie/FourMol/master/Mpro-x10555_0A/Mpro-x10555_0A.mol', 
//  badids = '0;1;2;3', 
//  badcomments = `a;b;c;This Atom is Garbage; lorem ipsum dolor sit amet; I am not really convinced by the electron density.`)

//------------------------------------------------------------------------------------------------------------------------
function setComponentNames(x, namedComponents)
{
   console.log("--- setComponentNames");
   console.log(namedComponents);

    // stage.getComponentsByName(window.pdbID).list[0].removeAllRepresentations()

   for(name in namedComponents){
     attributes = namedComponents[name];
     var rep = attributes.representation;
     var selectionString = attributes.selection;
     console.log("name '" + name + "' for '" + selectionString + "' rep: " + rep)
     debugger;
     //stage.getComponentsByName(window.pdbID).addRepresentation(rep, {sele: selectionString,
     //                                  name: name})
     } // for name

   //component.addRepresentation('ball+stick', {name: 'ligand', sele: 'ligand'})
   //stage.getComponentsByName(window.pdbID).addRepresentation(rep, attributes);

} // setComponentNames

if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler("addFileHandler", function(message){
  // Pretty much every other function in this file can be done using this multiple times.
  // Representations available here: https://nglviewer.org/ngl/api/manual/molecular-representations.html
  /* Some Fields that do things before representationParameters
    message.clearStage
    message.object_name
    message.window_object
    message.clearWindow
    message.filestring
    message.extension
    message.representation
    message.autoview
    message.isBinary
  */
  if(message.clearStage){ // Blank SlatEe?
    stage.removeAllComponents()
  }
  if(!window[message.window_object]){
    window[message.window_object] = {}
  }
  if(message.clearWindow){ // Reset the object and dispose of current components if present, if asked for.
    console.log(message.window_object)
    iter = Object.entries(window[message.window_object]).map(x => x[0])
    for (let i = 0; i < iter.length; i++) {
      console.log(iter[i])
      try{
        window[message.window_object][iter[i]].dispose()
      }
      catch(err) {
        console.log('')
      }
    }
    delete window[message.window_object]
    window[message.window_object] = {}
  }
  if(message.isBinary){ // Read data, if binary convert b64 string to bytes array then, blob. otherwise blob
    var byteCharacters = atob(message.filestring);
    var byteNumbers = new Array(byteCharacters.length);
    for (let i = 0; i < byteCharacters.length; i++){
      byteNumbers[i] = byteCharacters.charCodeAt(i);
    };
    var byteArray = new Uint8Array(byteNumbers);
    var blob = new Blob([byteArray], {type: 'application/octet-binary'});
  } else {
    var blob = new Blob([message.filestring], {type: 'text/plain'});
  }
  stage.loadFile(blob, { ext: message.extension }).then(function(comp){ // Render component using specific representation and remaining options in message.
    window[message.window_object][message.object_name] = comp.addRepresentation(message.representation, message)
    if(message.autoview) {
        console.log('AutoViewing......')
        comp.autoView(3000) 
    }
    if(!message.visible === undefined){ window[message.window_object][message.object_name].setVisibility(message.visible) }
  })
})

if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler("componentParameterHandler", function(message){
  if(!message.object_name === undefined){
    window[message.window_object][message.object_name].setParameters(message)
    if(!message.visible === undefined) window[message.window_object][message.object_name].setVisibility(message.visible)
  } else {
    Object.entries(window[message.window_object]).map(x => {
      return {
        'p' : x[1].setParameters(message),
        'v' : message.visible === undefined ? true : x[1].setVisibility(message.visible)
      }
    })
  }
})

// Replaces a bunch of other things itself.
if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler('stageParameterHandler', function(message) {
  stage.setParameters(message)
})




//------------------------------------------------------------------------------------------------------------------------
if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler("fit", function(message){
    console.log("nglShiny fit");
    stage.autoView(500);
});

if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler("ligfit", function(message){
    var stringBlob = new Blob( [ window.pdbID ], { type: 'text/plain'} );
    stage.loadFile(stringBlob, { ext: "pdb" }).then(function (comp) {
      comp.autoView("LIG");
    });
})

//------------------------------------------------------------------------------------------------------------------------
if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler("removeAllRepresentations", function(message){

    stage.getComponentsByName(window.pdbID).list[0].removeAllRepresentations()
    stage.getComponentsByName(window.pdbID).list[1].removeAllRepresentations()
})

if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler("removeAllComponents", function(message){
    stage.removeAllComponents()
})

//------------------------------------------------------------------------------------------------------------------------
if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler("setRepresentation", function(message){

    console.log("nglShiny setRepresentation")
    var rep = message;
    window.representation = rep;
    stage.getComponentsByName(window.pdbID).addRepresentation(rep)
})

//--------------------
if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler("updateParams", function(message){
  console.log("nglShiny updateParams");
  var clipDist = message[0];
  var clipNear = message[1];
  var clipFar  = message[2];
  var fogNear  = message[3];
  var fogFar   = message[4];
  stage.setParameters({
    'clipDist': clipDist,
    'clipNear': clipNear,
    'clipFar': clipFar,
    'fogNear': fogNear,
    'fogFar': fogFar,
  });
})

//-------------------------
if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler("updateaparam", function(message){
  let obj = {}
  obj[message[0]] = message[1];
  stage.setParameters(obj);
})

if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler("as_resetclicked", function(message){
  window.clicked = [];
  window.clickNames = [];
  // No idea if this messes things up...
  Shiny.onInputChange('clickedAtoms', window.clicked);
  Shiny.onInputChange('clickNames', window.clickNames);
  window.clickedRepresentation.setVisibility(false) // Just flick it off...
})

//------------------------------------------------------------------------------------------------------------------------
if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler("setColorScheme", function(message){

    console.log("nglShiny setColorScheme")
    var newScheme = message[0];
    window.colorScheme = newScheme;
    console.log("new scheme: " + newScheme);
    // debugger;
    stage.getComponentsByName(window.pdbID).addRepresentation(window.representation, {colorScheme: newScheme})
})

//------------------------------------------------------------------------------------------------------------------------
if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler("setPDB", function(message){
    stage.removeAllComponents()
    window.pdbID = message[0];
    console.log("nglShiny setPDB: " + window.pdbID)
    //var url = "rcsb://" + window.pdbID;
    var url = window.pdbID;
    stage.loadFile(url).then(function(comp){
      comp.addRepresentation("ball+stick", {colorScheme: "residueIndex"});
      })
       // redundant?
    stage.getComponentsByName(window.pdbID).addRepresentation(window.representation, {colorScheme: window.colorScheme})
    stage.autoView(3000)
    })


if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler('setup', function(message){
  stage.setParameters({
    cameraType: "orthographic"//, mousePreset: "coot"
  })
  window.clicked = [];
  window.clickNames = [];
})

if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler("setPDB2", function(message){
    stage.removeAllComponents();
    // Assumption, message is R list of n objects
    var pdb = message[0];
    window.pdbID = pdb;
    var stringBlob = new Blob( [ pdb ], { type: 'text/plain'} );
    console.log("Uploading PDB")
    stage.setParameters({'clipNear':parseFloat(message[2]), 'clipFar':parseFloat(message[3]), 'clipDist':parseFloat(message[1]), 'fogNear':parseFloat(message[4]), 'fogFar':parseFloat(message[5])});
    stage.loadFile(stringBlob, { ext: "pdb" }).then(function (comp) {
      window.struc = comp.addRepresentation("ball+stick");
      window.ligand = comp.addRepresentation("ball+stick", {sele: "LIG", colorValue: "limegreen", multipleBond: "symmetric"});
      comp.addRepresentation("contact", {sele: "not (water or ion)"});
      comp.autoView(message[6]);
    });
});

if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler('setBadAtomsPDB', function(message){
    stage.removeAllComponents();
    // Assumption, message is R list of n objects
    var pdb = message[0];
    window.pdbID = pdb;
    var stringBlob = new Blob( [ pdb ], { type: 'text/plain'});
    stage.loadFile(stringBlob, { ext: "pdb" }).then(function (comp) {
      window.struc = comp.addRepresentation(message[1], {'linewidth':6, 'visible':false});
      if (message[2] === 'true') {
        comp.autoView(3000)
      }
    });
    if (message[2] === 'true') {
      stage.autoView(3000)
    }
    // Message[3] = badids string
    // message[4] = badcomments (if any)
    readPDBFixedStyle(stringBlob, message[3], message[4])
})

if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler("setBadMolandfocus", function(message){
    var mol = message[0];
    window.molstring = mol
    var stringBlob = new Blob( [ mol ], { type: 'text/plain'} );
    console.log("Uploading .Mol")
    stage.loadFile(stringBlob, { ext: message[1] }).then(function (comp) {
      window.mol = comp.addRepresentation("licorice", {colorValue: 'limegreen', multipleBond: "symmetric", visible: false});
      if (message[2] === 'true') {
        comp.autoView(3000)
      }
    });
    readFileFixedStyle(stringBlob, message[3], message[4])
});


if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler("setapoPDB", function(message){
    stage.removeAllComponents();
    // Assumption, message is R list of n objects
    var pdb = message[0];
    window.pdbID = pdb;
    var stringBlob = new Blob( [ pdb ], { type: 'text/plain'} );
    console.log("Uploading PDB")
    stage.loadFile(stringBlob, { ext: "pdb" }).then(function (comp) {
      window.struc = comp.addRepresentation(message[1], {'linewidth':6});
      if (message[2] === 'true') {
        comp.autoView(3000)
      }
    });
    if (message[2] === 'true') {
      stage.autoView(3000)
    }
});

if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler('messageDump', function(message){
  console.log(message)
})

if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler("addContacts", function(message){
  var pdb = message[0];
  window.contactID = pdb
  var stringBlob = new Blob( [ pdb ], { type: 'text/plain'} );
  stage.loadFile(stringBlob, { ext: "pdb" }).then(function (comp) {
    window.contacts = comp.addRepresentation('contact')
  })
})

if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler("addMol", function(message){
    var mol = message[0];
    var stringBlob = new Blob( [ mol ], { type: 'text/plain'} );
    console.log("Uploading .Mol")
    console.log('New Message!!')
    console.log(mol)
    stage.loadFile(stringBlob, { ext: "mol" }).then(function (comp) {
      comp.addRepresentation("licorice", {multipleBond: "symmetric", opacity:.25});
      //comp.autoView();
    });
});

if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler("addMolandfocus", function(message){
    //try {
    //  window.mol.setVisibility(false)
    //}
    //finally {
    var mol = message[0];
    window.molstring = mol
    var stringBlob = new Blob( [ mol ], { type: 'text/plain'} );
    console.log("Uploading .Mol")
    stage.loadFile(stringBlob, { ext: message[1] }).then(function (comp) {
      window.mol = comp.addRepresentation("licorice", {colorValue: 'limegreen', multipleBond: "symmetric"});
      if (message[2] === 'true') {
        comp.autoView(3000)
      }
    });
  //}
});

if (HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler('save_camera_pos', function (message)
{
  window.om = stage.viewerControls.getOrientation()
});

if (HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler('restore_camera_pos', function (message)
{
  stage.animationControls.orient(window.om, 3000);
});

if (HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler('focus_on_mol', function (message)
{
  var stringBlob = new Blob([window.molstring], { type: 'text/plain' });
  stage.loadFile(stringBlob, { ext: 'mol' }).then(function (comp)
  {
    comp.addRepresentation('ball+stick', { aspectRatio: 0, radius: 0 })
    comp.autoView(3000)
  })
})

if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler("fv_addMolandfocus", function(message){
    try {
      window.mol.setVisibility(false)
    }
    finally {
    var mol = message[0];
    var stringBlob = new Blob( [ mol ], { type: 'text/plain'} );
    console.log("Uploading .Mol")
    stage.loadFile(stringBlob, { ext: "mol"}).then(function (comp) {
      window.mol = comp.addRepresentation("licorice", {colorValue: 'limegreen', multipleBond: "symmetric"});
      //comp.autoView();
    });
  }
});

if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler("clear_window_field", function(message){
    if(!window[message[0]]){
      window[message[0]]=[]
    } else {
      window[message[0]].map(x => x.setVisibility(false))
      window[message[0]] = []
    }
})

if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler('setVisibility', function(message){
  if(window[message[0]]){
    window[message[0]].setVisibility()
  }
})

if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler('setBFactor', function(message){
  if(!window['bfactors']) window['bfactors'] = []
  var pdb = message[0];
  var stringBlob = new Blob( [ pdb ], { type: 'text/plain'} );
  stage.loadFile(stringBlob, { ext: "pdb"}).then(function (comp) {
      console.log('Rendering Bfactor')
      window['bfactors'].push(comp.addRepresentation("line", {color: 'bfactor', linewidth:6}));
  });
})

if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler("fv_addMolandfocus_withcolor", function(message){
    if(!window.othermol) window.othermol=[]
    var mol = message[0];
    var stringBlob = new Blob( [ mol ], { type: 'text/plain'} );
    stage.loadFile(stringBlob, { ext: "mol"}).then(function (comp) {
      window.othermol.push(comp.addRepresentation("licorice", {colorValue: message[1], multipleBond: "symmetric"}));
    });
})

if (HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler('go_to_residue', function (message)
{
  var gotores = window.pdbID
  var stringBlob = new Blob( [ gotores ], { type: 'text/plain'} );
  console.log("Go To:")
  console.log(message[0])
  stage.loadFile(stringBlob, { ext: "pdb" }).then(function (comp)
  { 
    comp.addRepresentation('ball+stick', {aspectRatio:0, radius:0, sele: message[0]})
    comp.autoView(message[0], 3000)
  })
})

if (HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler('highlight_residues', function (message)
{
  try {
    window.highlight.dispose()
  }
  finally {
    var viewedstruc = window.pdbID
    var stringBlob = new Blob([viewedstruc], { type: 'text/plain' });
    stage.loadFile(stringBlob, { ext: "pdb" }).then(function (comp)
    { 
      window.highlight = comp.addRepresentation('ball+stick', {color:'magenta', sele: message[0]})
    })
  }
})


//--------------------------------------------------------------------------------------------
if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler('addVolumeDensity', function(message){
  if(!window['eventmap']) window['eventmap'] = []
  if(!window['twofofc']) window['twofofc'] = []
  if(!window['fofcpos']) window['fofcpos'] = []
  if(!window['fofcneg']) window['fofcneg'] = []
  try {
    console.log('Clearing')
    window[message[7]].dispose()
    console.log('Cleared!')
  } 
  finally {
    var byteCharacters = atob(message[0]);
    var byteNumbers = new Array(byteCharacters.length);
    for (let i = 0; i < byteCharacters.length; i++){
      byteNumbers[i] = byteCharacters.charCodeAt(i);
    };
    var byteArray = new Uint8Array(byteNumbers);
    var blob = new Blob([byteArray], {type: 'application/octet-binary'});
    stage.loadFile( blob, { ext: message[4] } ).then(function (comp) {
      window[message[7]] = comp.addRepresentation('surface', {
        isolevelType: message[8],
        background: true,
        isolevel: parseFloat(message[1]),
        color: message[2],
        negateIsolevel: message[3] === 'true',
        boxSize: parseFloat(message[5]),
        smooth: 10,
        useWorker: true,
        contour: true,
        wrap: false
      }).setVisibility(message[6] === 'true');
    });
  }
});


if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler('updateVolumeDensityISO', function(message){
  window[message[0]].setParameters({
    isolevel: parseFloat(message[1])
  });
});

if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler('updateVolumeDensityBoxSize', function(message){
  window[message[0]].setParameters({
    boxSize: parseFloat(message[1])
  });
});

if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler("updateVolumeDensityVisability", function(message){
  window[message[0]].setVisibility((message[1]=='true'))
});


if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler("updateAssembly", function(message){
  console.log("Update Assembly to" + message[0])
  window.struc.setParameters({assembly:message[0]});
  window.ligand.setParameters({colorValue: "limegreen"})
})



//------------------------------------------------------------------------------------------------------------------------
if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler("select", function(message){

    residueString = message[0];
    console.log("nglShiny select: " + residueString)
    stage.getComponentsByName(window.pdbID).addRepresentation("ball+stick", {sele: residueString})
    //stage.getComponentsByName(window.pdbID).addRepresentation("ball+stick", {sele: "23, 24, 25, 26, 27, 28, 29, 30"})
    })

//------------------------------------------------------------------------------------------------------------------------
if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler("showSelection", function(message){

    //residueString = message[0];
    var rep = message.representation;
    var selection = message.selection;
    var colorScheme = message.colorScheme;
    var name = message.name;
    var attributes = {sele: selection, colorScheme: colorScheme, name: name};
    console.log("attributes")
    console.log(attributes)
    console.log("nglShiny showSelection: " + rep + ",  " + selection);
    //stage.getComponentsByName(window.pdbID).addRepresentation(rep, {sele: selection, colorScheme: colorScheme, name: name})
    stage.getComponentsByName(window.pdbID).addRepresentation(rep, attributes);
    // stage.getComponentsByName('1ztu').addRepresentation('ball+stick', {sele: 'not helix and not sheet and not turn and not water'})
    })

//------------------------------------------------------------------------------------------------------------------------
if(HTMLWidgets.shinyMode) Shiny.addCustomMessageHandler("setVisibility", function(message){

    var repName = message.representationName;
    var newState = message.newState;
    console.log("set visibility " + repName + "  " + newState)
    stage.getRepresentationsByName(repName).setVisibility(newState)
    })

//------------------------------------------------------------------------------------------------------------------------
